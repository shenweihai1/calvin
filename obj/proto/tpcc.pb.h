// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tpcc.proto

#ifndef PROTOBUF_INCLUDED_tpcc_2eproto
#define PROTOBUF_INCLUDED_tpcc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tpcc_2eproto 

namespace protobuf_tpcc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tpcc_2eproto
class Customer;
class CustomerDefaultTypeInternal;
extern CustomerDefaultTypeInternal _Customer_default_instance_;
class District;
class DistrictDefaultTypeInternal;
extern DistrictDefaultTypeInternal _District_default_instance_;
class History;
class HistoryDefaultTypeInternal;
extern HistoryDefaultTypeInternal _History_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class NewOrder;
class NewOrderDefaultTypeInternal;
extern NewOrderDefaultTypeInternal _NewOrder_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderLine;
class OrderLineDefaultTypeInternal;
extern OrderLineDefaultTypeInternal _OrderLine_default_instance_;
class Stock;
class StockDefaultTypeInternal;
extern StockDefaultTypeInternal _Stock_default_instance_;
class Warehouse;
class WarehouseDefaultTypeInternal;
extern WarehouseDefaultTypeInternal _Warehouse_default_instance_;
namespace google {
namespace protobuf {
template<> ::Customer* Arena::CreateMaybeMessage<::Customer>(Arena*);
template<> ::District* Arena::CreateMaybeMessage<::District>(Arena*);
template<> ::History* Arena::CreateMaybeMessage<::History>(Arena*);
template<> ::Item* Arena::CreateMaybeMessage<::Item>(Arena*);
template<> ::NewOrder* Arena::CreateMaybeMessage<::NewOrder>(Arena*);
template<> ::Order* Arena::CreateMaybeMessage<::Order>(Arena*);
template<> ::OrderLine* Arena::CreateMaybeMessage<::OrderLine>(Arena*);
template<> ::Stock* Arena::CreateMaybeMessage<::Stock>(Arena*);
template<> ::Warehouse* Arena::CreateMaybeMessage<::Warehouse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Warehouse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Warehouse) */ {
 public:
  Warehouse();
  virtual ~Warehouse();

  Warehouse(const Warehouse& from);

  inline Warehouse& operator=(const Warehouse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Warehouse(Warehouse&& from) noexcept
    : Warehouse() {
    *this = ::std::move(from);
  }

  inline Warehouse& operator=(Warehouse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Warehouse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Warehouse* internal_default_instance() {
    return reinterpret_cast<const Warehouse*>(
               &_Warehouse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Warehouse* other);
  friend void swap(Warehouse& a, Warehouse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Warehouse* New() const final {
    return CreateMaybeMessage<Warehouse>(NULL);
  }

  Warehouse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Warehouse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Warehouse& from);
  void MergeFrom(const Warehouse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Warehouse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes name = 11;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 11;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes street_1 = 12;
  bool has_street_1() const;
  void clear_street_1();
  static const int kStreet1FieldNumber = 12;
  const ::std::string& street_1() const;
  void set_street_1(const ::std::string& value);
  #if LANG_CXX11
  void set_street_1(::std::string&& value);
  #endif
  void set_street_1(const char* value);
  void set_street_1(const void* value, size_t size);
  ::std::string* mutable_street_1();
  ::std::string* release_street_1();
  void set_allocated_street_1(::std::string* street_1);

  // optional bytes street_2 = 13;
  bool has_street_2() const;
  void clear_street_2();
  static const int kStreet2FieldNumber = 13;
  const ::std::string& street_2() const;
  void set_street_2(const ::std::string& value);
  #if LANG_CXX11
  void set_street_2(::std::string&& value);
  #endif
  void set_street_2(const char* value);
  void set_street_2(const void* value, size_t size);
  ::std::string* mutable_street_2();
  ::std::string* release_street_2();
  void set_allocated_street_2(::std::string* street_2);

  // optional bytes city = 14;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 14;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const void* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional bytes state = 15;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 15;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional bytes zip = 16;
  bool has_zip() const;
  void clear_zip();
  static const int kZipFieldNumber = 16;
  const ::std::string& zip() const;
  void set_zip(const ::std::string& value);
  #if LANG_CXX11
  void set_zip(::std::string&& value);
  #endif
  void set_zip(const char* value);
  void set_zip(const void* value, size_t size);
  ::std::string* mutable_zip();
  ::std::string* release_zip();
  void set_allocated_zip(::std::string* zip);

  // optional double tax = 20;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 20;
  double tax() const;
  void set_tax(double value);

  // optional double year_to_date = 21;
  bool has_year_to_date() const;
  void clear_year_to_date();
  static const int kYearToDateFieldNumber = 21;
  double year_to_date() const;
  void set_year_to_date(double value);

  // @@protoc_insertion_point(class_scope:Warehouse)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_street_1();
  void clear_has_street_1();
  void set_has_street_2();
  void clear_has_street_2();
  void set_has_city();
  void clear_has_city();
  void set_has_state();
  void clear_has_state();
  void set_has_zip();
  void clear_has_zip();
  void set_has_tax();
  void clear_has_tax();
  void set_has_year_to_date();
  void clear_has_year_to_date();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr street_1_;
  ::google::protobuf::internal::ArenaStringPtr street_2_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr zip_;
  double tax_;
  double year_to_date_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class District : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:District) */ {
 public:
  District();
  virtual ~District();

  District(const District& from);

  inline District& operator=(const District& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  District(District&& from) noexcept
    : District() {
    *this = ::std::move(from);
  }

  inline District& operator=(District&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const District& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const District* internal_default_instance() {
    return reinterpret_cast<const District*>(
               &_District_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(District* other);
  friend void swap(District& a, District& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline District* New() const final {
    return CreateMaybeMessage<District>(NULL);
  }

  District* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<District>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const District& from);
  void MergeFrom(const District& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(District* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required bytes warehouse_id = 2;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 2;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // optional bytes name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes street_1 = 11;
  bool has_street_1() const;
  void clear_street_1();
  static const int kStreet1FieldNumber = 11;
  const ::std::string& street_1() const;
  void set_street_1(const ::std::string& value);
  #if LANG_CXX11
  void set_street_1(::std::string&& value);
  #endif
  void set_street_1(const char* value);
  void set_street_1(const void* value, size_t size);
  ::std::string* mutable_street_1();
  ::std::string* release_street_1();
  void set_allocated_street_1(::std::string* street_1);

  // optional bytes street_2 = 12;
  bool has_street_2() const;
  void clear_street_2();
  static const int kStreet2FieldNumber = 12;
  const ::std::string& street_2() const;
  void set_street_2(const ::std::string& value);
  #if LANG_CXX11
  void set_street_2(::std::string&& value);
  #endif
  void set_street_2(const char* value);
  void set_street_2(const void* value, size_t size);
  ::std::string* mutable_street_2();
  ::std::string* release_street_2();
  void set_allocated_street_2(::std::string* street_2);

  // optional bytes city = 13;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 13;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const void* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional bytes state = 14;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 14;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional bytes zip = 15;
  bool has_zip() const;
  void clear_zip();
  static const int kZipFieldNumber = 15;
  const ::std::string& zip() const;
  void set_zip(const ::std::string& value);
  #if LANG_CXX11
  void set_zip(::std::string&& value);
  #endif
  void set_zip(const char* value);
  void set_zip(const void* value, size_t size);
  ::std::string* mutable_zip();
  ::std::string* release_zip();
  void set_allocated_zip(::std::string* zip);

  // optional int32 next_order_id = 22;
  bool has_next_order_id() const;
  void clear_next_order_id();
  static const int kNextOrderIdFieldNumber = 22;
  ::google::protobuf::int32 next_order_id() const;
  void set_next_order_id(::google::protobuf::int32 value);

  // optional double tax = 20;
  bool has_tax() const;
  void clear_tax();
  static const int kTaxFieldNumber = 20;
  double tax() const;
  void set_tax(double value);

  // optional double year_to_date = 21;
  bool has_year_to_date() const;
  void clear_year_to_date();
  static const int kYearToDateFieldNumber = 21;
  double year_to_date() const;
  void set_year_to_date(double value);

  // @@protoc_insertion_point(class_scope:District)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_name();
  void clear_has_name();
  void set_has_street_1();
  void clear_has_street_1();
  void set_has_street_2();
  void clear_has_street_2();
  void set_has_city();
  void clear_has_city();
  void set_has_state();
  void clear_has_state();
  void set_has_zip();
  void clear_has_zip();
  void set_has_tax();
  void clear_has_tax();
  void set_has_year_to_date();
  void clear_has_year_to_date();
  void set_has_next_order_id();
  void clear_has_next_order_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr street_1_;
  ::google::protobuf::internal::ArenaStringPtr street_2_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr zip_;
  ::google::protobuf::int32 next_order_id_;
  double tax_;
  double year_to_date_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Customer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Customer) */ {
 public:
  Customer();
  virtual ~Customer();

  Customer(const Customer& from);

  inline Customer& operator=(const Customer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Customer(Customer&& from) noexcept
    : Customer() {
    *this = ::std::move(from);
  }

  inline Customer& operator=(Customer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Customer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Customer* internal_default_instance() {
    return reinterpret_cast<const Customer*>(
               &_Customer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Customer* other);
  friend void swap(Customer& a, Customer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Customer* New() const final {
    return CreateMaybeMessage<Customer>(NULL);
  }

  Customer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Customer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Customer& from);
  void MergeFrom(const Customer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Customer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required bytes district_id = 2;
  bool has_district_id() const;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 2;
  const ::std::string& district_id() const;
  void set_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_district_id(::std::string&& value);
  #endif
  void set_district_id(const char* value);
  void set_district_id(const void* value, size_t size);
  ::std::string* mutable_district_id();
  ::std::string* release_district_id();
  void set_allocated_district_id(::std::string* district_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // optional bytes first = 10;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 10;
  const ::std::string& first() const;
  void set_first(const ::std::string& value);
  #if LANG_CXX11
  void set_first(::std::string&& value);
  #endif
  void set_first(const char* value);
  void set_first(const void* value, size_t size);
  ::std::string* mutable_first();
  ::std::string* release_first();
  void set_allocated_first(::std::string* first);

  // optional bytes middle = 11;
  bool has_middle() const;
  void clear_middle();
  static const int kMiddleFieldNumber = 11;
  const ::std::string& middle() const;
  void set_middle(const ::std::string& value);
  #if LANG_CXX11
  void set_middle(::std::string&& value);
  #endif
  void set_middle(const char* value);
  void set_middle(const void* value, size_t size);
  ::std::string* mutable_middle();
  ::std::string* release_middle();
  void set_allocated_middle(::std::string* middle);

  // required bytes last = 12;
  bool has_last() const;
  void clear_last();
  static const int kLastFieldNumber = 12;
  const ::std::string& last() const;
  void set_last(const ::std::string& value);
  #if LANG_CXX11
  void set_last(::std::string&& value);
  #endif
  void set_last(const char* value);
  void set_last(const void* value, size_t size);
  ::std::string* mutable_last();
  ::std::string* release_last();
  void set_allocated_last(::std::string* last);

  // optional bytes street_1 = 13;
  bool has_street_1() const;
  void clear_street_1();
  static const int kStreet1FieldNumber = 13;
  const ::std::string& street_1() const;
  void set_street_1(const ::std::string& value);
  #if LANG_CXX11
  void set_street_1(::std::string&& value);
  #endif
  void set_street_1(const char* value);
  void set_street_1(const void* value, size_t size);
  ::std::string* mutable_street_1();
  ::std::string* release_street_1();
  void set_allocated_street_1(::std::string* street_1);

  // optional bytes street_2 = 14;
  bool has_street_2() const;
  void clear_street_2();
  static const int kStreet2FieldNumber = 14;
  const ::std::string& street_2() const;
  void set_street_2(const ::std::string& value);
  #if LANG_CXX11
  void set_street_2(::std::string&& value);
  #endif
  void set_street_2(const char* value);
  void set_street_2(const void* value, size_t size);
  ::std::string* mutable_street_2();
  ::std::string* release_street_2();
  void set_allocated_street_2(::std::string* street_2);

  // optional bytes city = 15;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 15;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const void* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional bytes state = 16;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 16;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional bytes zip = 17;
  bool has_zip() const;
  void clear_zip();
  static const int kZipFieldNumber = 17;
  const ::std::string& zip() const;
  void set_zip(const ::std::string& value);
  #if LANG_CXX11
  void set_zip(::std::string&& value);
  #endif
  void set_zip(const char* value);
  void set_zip(const void* value, size_t size);
  ::std::string* mutable_zip();
  ::std::string* release_zip();
  void set_allocated_zip(::std::string* zip);

  // optional bytes credit = 21;
  bool has_credit() const;
  void clear_credit();
  static const int kCreditFieldNumber = 21;
  const ::std::string& credit() const;
  void set_credit(const ::std::string& value);
  #if LANG_CXX11
  void set_credit(::std::string&& value);
  #endif
  void set_credit(const char* value);
  void set_credit(const void* value, size_t size);
  ::std::string* mutable_credit();
  ::std::string* release_credit();
  void set_allocated_credit(::std::string* credit);

  // optional bytes data = 30;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 30;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 delivery_count = 27;
  bool has_delivery_count() const;
  void clear_delivery_count();
  static const int kDeliveryCountFieldNumber = 27;
  ::google::protobuf::int32 delivery_count() const;
  void set_delivery_count(::google::protobuf::int32 value);

  // optional double credit_limit = 22;
  bool has_credit_limit() const;
  void clear_credit_limit();
  static const int kCreditLimitFieldNumber = 22;
  double credit_limit() const;
  void set_credit_limit(double value);

  // optional double discount = 23;
  bool has_discount() const;
  void clear_discount();
  static const int kDiscountFieldNumber = 23;
  double discount() const;
  void set_discount(double value);

  // optional int32 since = 20;
  bool has_since() const;
  void clear_since();
  static const int kSinceFieldNumber = 20;
  ::google::protobuf::int32 since() const;
  void set_since(::google::protobuf::int32 value);

  // optional int32 payment_count = 26;
  bool has_payment_count() const;
  void clear_payment_count();
  static const int kPaymentCountFieldNumber = 26;
  ::google::protobuf::int32 payment_count() const;
  void set_payment_count(::google::protobuf::int32 value);

  // optional double balance = 24;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 24;
  double balance() const;
  void set_balance(double value);

  // optional double year_to_date_payment = 25;
  bool has_year_to_date_payment() const;
  void clear_year_to_date_payment();
  static const int kYearToDatePaymentFieldNumber = 25;
  double year_to_date_payment() const;
  void set_year_to_date_payment(double value);

  // @@protoc_insertion_point(class_scope:Customer)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_district_id();
  void clear_has_district_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_first();
  void clear_has_first();
  void set_has_middle();
  void clear_has_middle();
  void set_has_last();
  void clear_has_last();
  void set_has_street_1();
  void clear_has_street_1();
  void set_has_street_2();
  void clear_has_street_2();
  void set_has_city();
  void clear_has_city();
  void set_has_state();
  void clear_has_state();
  void set_has_zip();
  void clear_has_zip();
  void set_has_since();
  void clear_has_since();
  void set_has_credit();
  void clear_has_credit();
  void set_has_credit_limit();
  void clear_has_credit_limit();
  void set_has_discount();
  void clear_has_discount();
  void set_has_balance();
  void clear_has_balance();
  void set_has_year_to_date_payment();
  void clear_has_year_to_date_payment();
  void set_has_payment_count();
  void clear_has_payment_count();
  void set_has_delivery_count();
  void clear_has_delivery_count();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr district_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr first_;
  ::google::protobuf::internal::ArenaStringPtr middle_;
  ::google::protobuf::internal::ArenaStringPtr last_;
  ::google::protobuf::internal::ArenaStringPtr street_1_;
  ::google::protobuf::internal::ArenaStringPtr street_2_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr zip_;
  ::google::protobuf::internal::ArenaStringPtr credit_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 delivery_count_;
  double credit_limit_;
  double discount_;
  ::google::protobuf::int32 since_;
  ::google::protobuf::int32 payment_count_;
  double balance_;
  double year_to_date_payment_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NewOrder) */ {
 public:
  NewOrder();
  virtual ~NewOrder();

  NewOrder(const NewOrder& from);

  inline NewOrder& operator=(const NewOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewOrder(NewOrder&& from) noexcept
    : NewOrder() {
    *this = ::std::move(from);
  }

  inline NewOrder& operator=(NewOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewOrder* internal_default_instance() {
    return reinterpret_cast<const NewOrder*>(
               &_NewOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NewOrder* other);
  friend void swap(NewOrder& a, NewOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewOrder* New() const final {
    return CreateMaybeMessage<NewOrder>(NULL);
  }

  NewOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewOrder& from);
  void MergeFrom(const NewOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required bytes district_id = 2;
  bool has_district_id() const;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 2;
  const ::std::string& district_id() const;
  void set_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_district_id(::std::string&& value);
  #endif
  void set_district_id(const char* value);
  void set_district_id(const void* value, size_t size);
  ::std::string* mutable_district_id();
  ::std::string* release_district_id();
  void set_allocated_district_id(::std::string* district_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // @@protoc_insertion_point(class_scope:NewOrder)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_district_id();
  void clear_has_district_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr district_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(NULL);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 order_line_ptr = 14;
  int order_line_ptr_size() const;
  void clear_order_line_ptr();
  static const int kOrderLinePtrFieldNumber = 14;
  ::google::protobuf::uint64 order_line_ptr(int index) const;
  void set_order_line_ptr(int index, ::google::protobuf::uint64 value);
  void add_order_line_ptr(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      order_line_ptr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_order_line_ptr();

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required bytes district_id = 2;
  bool has_district_id() const;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 2;
  const ::std::string& district_id() const;
  void set_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_district_id(::std::string&& value);
  #endif
  void set_district_id(const char* value);
  void set_district_id(const void* value, size_t size);
  ::std::string* mutable_district_id();
  ::std::string* release_district_id();
  void set_allocated_district_id(::std::string* district_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // required bytes customer_id = 4;
  bool has_customer_id() const;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 4;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const void* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // optional double entry_date = 10;
  bool has_entry_date() const;
  void clear_entry_date();
  static const int kEntryDateFieldNumber = 10;
  double entry_date() const;
  void set_entry_date(double value);

  // optional bool all_items_local = 13;
  bool has_all_items_local() const;
  void clear_all_items_local();
  static const int kAllItemsLocalFieldNumber = 13;
  bool all_items_local() const;
  void set_all_items_local(bool value);

  // optional int32 carrier_id = 11;
  bool has_carrier_id() const;
  void clear_carrier_id();
  static const int kCarrierIdFieldNumber = 11;
  ::google::protobuf::int32 carrier_id() const;
  void set_carrier_id(::google::protobuf::int32 value);

  // optional int32 order_line_count = 12;
  bool has_order_line_count() const;
  void clear_order_line_count();
  static const int kOrderLineCountFieldNumber = 12;
  ::google::protobuf::int32 order_line_count() const;
  void set_order_line_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Order)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_district_id();
  void clear_has_district_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_customer_id();
  void clear_has_customer_id();
  void set_has_entry_date();
  void clear_has_entry_date();
  void set_has_carrier_id();
  void clear_has_carrier_id();
  void set_has_order_line_count();
  void clear_has_order_line_count();
  void set_has_all_items_local();
  void clear_has_all_items_local();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > order_line_ptr_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr district_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  double entry_date_;
  bool all_items_local_;
  ::google::protobuf::int32 carrier_id_;
  ::google::protobuf::int32 order_line_count_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrderLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OrderLine) */ {
 public:
  OrderLine();
  virtual ~OrderLine();

  OrderLine(const OrderLine& from);

  inline OrderLine& operator=(const OrderLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderLine(OrderLine&& from) noexcept
    : OrderLine() {
    *this = ::std::move(from);
  }

  inline OrderLine& operator=(OrderLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderLine* internal_default_instance() {
    return reinterpret_cast<const OrderLine*>(
               &_OrderLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OrderLine* other);
  friend void swap(OrderLine& a, OrderLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderLine* New() const final {
    return CreateMaybeMessage<OrderLine>(NULL);
  }

  OrderLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderLine& from);
  void MergeFrom(const OrderLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes order_id = 1;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const void* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // required bytes district_id = 2;
  bool has_district_id() const;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 2;
  const ::std::string& district_id() const;
  void set_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_district_id(::std::string&& value);
  #endif
  void set_district_id(const char* value);
  void set_district_id(const void* value, size_t size);
  ::std::string* mutable_district_id();
  ::std::string* release_district_id();
  void set_allocated_district_id(::std::string* district_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // required bytes item_id = 4;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const void* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // required bytes supply_warehouse_id = 5;
  bool has_supply_warehouse_id() const;
  void clear_supply_warehouse_id();
  static const int kSupplyWarehouseIdFieldNumber = 5;
  const ::std::string& supply_warehouse_id() const;
  void set_supply_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_supply_warehouse_id(::std::string&& value);
  #endif
  void set_supply_warehouse_id(const char* value);
  void set_supply_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_supply_warehouse_id();
  ::std::string* release_supply_warehouse_id();
  void set_allocated_supply_warehouse_id(::std::string* supply_warehouse_id);

  // optional bytes district_information = 14;
  bool has_district_information() const;
  void clear_district_information();
  static const int kDistrictInformationFieldNumber = 14;
  const ::std::string& district_information() const;
  void set_district_information(const ::std::string& value);
  #if LANG_CXX11
  void set_district_information(::std::string&& value);
  #endif
  void set_district_information(const char* value);
  void set_district_information(const void* value, size_t size);
  ::std::string* mutable_district_information();
  ::std::string* release_district_information();
  void set_allocated_district_information(::std::string* district_information);

  // optional double delivery_date = 11;
  bool has_delivery_date() const;
  void clear_delivery_date();
  static const int kDeliveryDateFieldNumber = 11;
  double delivery_date() const;
  void set_delivery_date(double value);

  // optional int32 number = 10;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 10;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // optional int32 quantity = 12;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 12;
  ::google::protobuf::int32 quantity() const;
  void set_quantity(::google::protobuf::int32 value);

  // optional double amount = 13;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 13;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:OrderLine)
 private:
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_district_id();
  void clear_has_district_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_supply_warehouse_id();
  void clear_has_supply_warehouse_id();
  void set_has_number();
  void clear_has_number();
  void set_has_delivery_date();
  void clear_has_delivery_date();
  void set_has_quantity();
  void clear_has_quantity();
  void set_has_amount();
  void clear_has_amount();
  void set_has_district_information();
  void clear_has_district_information();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr district_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::internal::ArenaStringPtr supply_warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr district_information_;
  double delivery_date_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 quantity_;
  double amount_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Item* other);
  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(NULL);
  }

  Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes data = 20;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 20;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional double price = 11;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 11;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:Item)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_price();
  void clear_has_price();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  double price_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Stock) */ {
 public:
  Stock();
  virtual ~Stock();

  Stock(const Stock& from);

  inline Stock& operator=(const Stock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stock(Stock&& from) noexcept
    : Stock() {
    *this = ::std::move(from);
  }

  inline Stock& operator=(Stock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stock* internal_default_instance() {
    return reinterpret_cast<const Stock*>(
               &_Stock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Stock* other);
  friend void swap(Stock& a, Stock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stock* New() const final {
    return CreateMaybeMessage<Stock>(NULL);
  }

  Stock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stock& from);
  void MergeFrom(const Stock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes districts = 11;
  int districts_size() const;
  void clear_districts();
  static const int kDistrictsFieldNumber = 11;
  const ::std::string& districts(int index) const;
  ::std::string* mutable_districts(int index);
  void set_districts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_districts(int index, ::std::string&& value);
  #endif
  void set_districts(int index, const char* value);
  void set_districts(int index, const void* value, size_t size);
  ::std::string* add_districts();
  void add_districts(const ::std::string& value);
  #if LANG_CXX11
  void add_districts(::std::string&& value);
  #endif
  void add_districts(const char* value);
  void add_districts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& districts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_districts();

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required bytes item_id = 2;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const void* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // optional bytes data = 20;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 20;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 quantity = 10;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 10;
  ::google::protobuf::int32 quantity() const;
  void set_quantity(::google::protobuf::int32 value);

  // optional int32 year_to_date = 12;
  bool has_year_to_date() const;
  void clear_year_to_date();
  static const int kYearToDateFieldNumber = 12;
  ::google::protobuf::int32 year_to_date() const;
  void set_year_to_date(::google::protobuf::int32 value);

  // optional int32 order_count = 13;
  bool has_order_count() const;
  void clear_order_count();
  static const int kOrderCountFieldNumber = 13;
  ::google::protobuf::int32 order_count() const;
  void set_order_count(::google::protobuf::int32 value);

  // optional int32 remote_count = 14;
  bool has_remote_count() const;
  void clear_remote_count();
  static const int kRemoteCountFieldNumber = 14;
  ::google::protobuf::int32 remote_count() const;
  void set_remote_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Stock)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_quantity();
  void clear_has_quantity();
  void set_has_year_to_date();
  void clear_has_year_to_date();
  void set_has_order_count();
  void clear_has_order_count();
  void set_has_remote_count();
  void clear_has_remote_count();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> districts_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 quantity_;
  ::google::protobuf::int32 year_to_date_;
  ::google::protobuf::int32 order_count_;
  ::google::protobuf::int32 remote_count_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class History : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:History) */ {
 public:
  History();
  virtual ~History();

  History(const History& from);

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  History(History&& from) noexcept
    : History() {
    *this = ::std::move(from);
  }

  inline History& operator=(History&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const History& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History* internal_default_instance() {
    return reinterpret_cast<const History*>(
               &_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(History* other);
  friend void swap(History& a, History& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline History* New() const final {
    return CreateMaybeMessage<History>(NULL);
  }

  History* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<History>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes customer_id = 1;
  bool has_customer_id() const;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 1;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const void* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // required bytes district_id = 2;
  bool has_district_id() const;
  void clear_district_id();
  static const int kDistrictIdFieldNumber = 2;
  const ::std::string& district_id() const;
  void set_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_district_id(::std::string&& value);
  #endif
  void set_district_id(const char* value);
  void set_district_id(const void* value, size_t size);
  ::std::string* mutable_district_id();
  ::std::string* release_district_id();
  void set_allocated_district_id(::std::string* district_id);

  // required bytes warehouse_id = 3;
  bool has_warehouse_id() const;
  void clear_warehouse_id();
  static const int kWarehouseIdFieldNumber = 3;
  const ::std::string& warehouse_id() const;
  void set_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_warehouse_id(::std::string&& value);
  #endif
  void set_warehouse_id(const char* value);
  void set_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_warehouse_id();
  ::std::string* release_warehouse_id();
  void set_allocated_warehouse_id(::std::string* warehouse_id);

  // required bytes customer_district_id = 4;
  bool has_customer_district_id() const;
  void clear_customer_district_id();
  static const int kCustomerDistrictIdFieldNumber = 4;
  const ::std::string& customer_district_id() const;
  void set_customer_district_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_district_id(::std::string&& value);
  #endif
  void set_customer_district_id(const char* value);
  void set_customer_district_id(const void* value, size_t size);
  ::std::string* mutable_customer_district_id();
  ::std::string* release_customer_district_id();
  void set_allocated_customer_district_id(::std::string* customer_district_id);

  // required bytes customer_warehouse_id = 5;
  bool has_customer_warehouse_id() const;
  void clear_customer_warehouse_id();
  static const int kCustomerWarehouseIdFieldNumber = 5;
  const ::std::string& customer_warehouse_id() const;
  void set_customer_warehouse_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_warehouse_id(::std::string&& value);
  #endif
  void set_customer_warehouse_id(const char* value);
  void set_customer_warehouse_id(const void* value, size_t size);
  ::std::string* mutable_customer_warehouse_id();
  ::std::string* release_customer_warehouse_id();
  void set_allocated_customer_warehouse_id(::std::string* customer_warehouse_id);

  // optional bytes data = 20;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 20;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional double date = 10;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 10;
  double date() const;
  void set_date(double value);

  // optional double amount = 11;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 11;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:History)
 private:
  void set_has_customer_id();
  void clear_has_customer_id();
  void set_has_district_id();
  void clear_has_district_id();
  void set_has_warehouse_id();
  void clear_has_warehouse_id();
  void set_has_customer_district_id();
  void clear_has_customer_district_id();
  void set_has_customer_warehouse_id();
  void clear_has_customer_warehouse_id();
  void set_has_date();
  void clear_has_date();
  void set_has_amount();
  void clear_has_amount();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  ::google::protobuf::internal::ArenaStringPtr district_id_;
  ::google::protobuf::internal::ArenaStringPtr warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_district_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_warehouse_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  double date_;
  double amount_;
  friend struct ::protobuf_tpcc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Warehouse

// required bytes id = 1;
inline bool Warehouse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Warehouse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Warehouse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Warehouse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Warehouse::id() const {
  // @@protoc_insertion_point(field_get:Warehouse.id)
  return id_.GetNoArena();
}
inline void Warehouse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.id)
}
#if LANG_CXX11
inline void Warehouse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.id)
}
#endif
inline void Warehouse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.id)
}
inline void Warehouse::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.id)
}
inline ::std::string* Warehouse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Warehouse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_id() {
  // @@protoc_insertion_point(field_release:Warehouse.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.id)
}

// optional bytes name = 11;
inline bool Warehouse::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Warehouse::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Warehouse::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Warehouse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Warehouse::name() const {
  // @@protoc_insertion_point(field_get:Warehouse.name)
  return name_.GetNoArena();
}
inline void Warehouse::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.name)
}
#if LANG_CXX11
inline void Warehouse::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.name)
}
#endif
inline void Warehouse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.name)
}
inline void Warehouse::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.name)
}
inline ::std::string* Warehouse::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Warehouse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_name() {
  // @@protoc_insertion_point(field_release:Warehouse.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.name)
}

// optional bytes street_1 = 12;
inline bool Warehouse::has_street_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Warehouse::set_has_street_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Warehouse::clear_has_street_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Warehouse::clear_street_1() {
  street_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_1();
}
inline const ::std::string& Warehouse::street_1() const {
  // @@protoc_insertion_point(field_get:Warehouse.street_1)
  return street_1_.GetNoArena();
}
inline void Warehouse::set_street_1(const ::std::string& value) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.street_1)
}
#if LANG_CXX11
inline void Warehouse::set_street_1(::std::string&& value) {
  set_has_street_1();
  street_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.street_1)
}
#endif
inline void Warehouse::set_street_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.street_1)
}
inline void Warehouse::set_street_1(const void* value, size_t size) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.street_1)
}
inline ::std::string* Warehouse::mutable_street_1() {
  set_has_street_1();
  // @@protoc_insertion_point(field_mutable:Warehouse.street_1)
  return street_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_street_1() {
  // @@protoc_insertion_point(field_release:Warehouse.street_1)
  if (!has_street_1()) {
    return NULL;
  }
  clear_has_street_1();
  return street_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_street_1(::std::string* street_1) {
  if (street_1 != NULL) {
    set_has_street_1();
  } else {
    clear_has_street_1();
  }
  street_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_1);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.street_1)
}

// optional bytes street_2 = 13;
inline bool Warehouse::has_street_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Warehouse::set_has_street_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Warehouse::clear_has_street_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Warehouse::clear_street_2() {
  street_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_2();
}
inline const ::std::string& Warehouse::street_2() const {
  // @@protoc_insertion_point(field_get:Warehouse.street_2)
  return street_2_.GetNoArena();
}
inline void Warehouse::set_street_2(const ::std::string& value) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.street_2)
}
#if LANG_CXX11
inline void Warehouse::set_street_2(::std::string&& value) {
  set_has_street_2();
  street_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.street_2)
}
#endif
inline void Warehouse::set_street_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.street_2)
}
inline void Warehouse::set_street_2(const void* value, size_t size) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.street_2)
}
inline ::std::string* Warehouse::mutable_street_2() {
  set_has_street_2();
  // @@protoc_insertion_point(field_mutable:Warehouse.street_2)
  return street_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_street_2() {
  // @@protoc_insertion_point(field_release:Warehouse.street_2)
  if (!has_street_2()) {
    return NULL;
  }
  clear_has_street_2();
  return street_2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_street_2(::std::string* street_2) {
  if (street_2 != NULL) {
    set_has_street_2();
  } else {
    clear_has_street_2();
  }
  street_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_2);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.street_2)
}

// optional bytes city = 14;
inline bool Warehouse::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Warehouse::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Warehouse::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Warehouse::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& Warehouse::city() const {
  // @@protoc_insertion_point(field_get:Warehouse.city)
  return city_.GetNoArena();
}
inline void Warehouse::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.city)
}
#if LANG_CXX11
inline void Warehouse::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.city)
}
#endif
inline void Warehouse::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.city)
}
inline void Warehouse::set_city(const void* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.city)
}
inline ::std::string* Warehouse::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:Warehouse.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_city() {
  // @@protoc_insertion_point(field_release:Warehouse.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.city)
}

// optional bytes state = 15;
inline bool Warehouse::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Warehouse::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Warehouse::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Warehouse::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& Warehouse::state() const {
  // @@protoc_insertion_point(field_get:Warehouse.state)
  return state_.GetNoArena();
}
inline void Warehouse::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.state)
}
#if LANG_CXX11
inline void Warehouse::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.state)
}
#endif
inline void Warehouse::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.state)
}
inline void Warehouse::set_state(const void* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.state)
}
inline ::std::string* Warehouse::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:Warehouse.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_state() {
  // @@protoc_insertion_point(field_release:Warehouse.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.state)
}

// optional bytes zip = 16;
inline bool Warehouse::has_zip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Warehouse::set_has_zip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Warehouse::clear_has_zip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Warehouse::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip();
}
inline const ::std::string& Warehouse::zip() const {
  // @@protoc_insertion_point(field_get:Warehouse.zip)
  return zip_.GetNoArena();
}
inline void Warehouse::set_zip(const ::std::string& value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Warehouse.zip)
}
#if LANG_CXX11
inline void Warehouse::set_zip(::std::string&& value) {
  set_has_zip();
  zip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Warehouse.zip)
}
#endif
inline void Warehouse::set_zip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Warehouse.zip)
}
inline void Warehouse::set_zip(const void* value, size_t size) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Warehouse.zip)
}
inline ::std::string* Warehouse::mutable_zip() {
  set_has_zip();
  // @@protoc_insertion_point(field_mutable:Warehouse.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warehouse::release_zip() {
  // @@protoc_insertion_point(field_release:Warehouse.zip)
  if (!has_zip()) {
    return NULL;
  }
  clear_has_zip();
  return zip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warehouse::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    set_has_zip();
  } else {
    clear_has_zip();
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:Warehouse.zip)
}

// optional double tax = 20;
inline bool Warehouse::has_tax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Warehouse::set_has_tax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Warehouse::clear_has_tax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Warehouse::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline double Warehouse::tax() const {
  // @@protoc_insertion_point(field_get:Warehouse.tax)
  return tax_;
}
inline void Warehouse::set_tax(double value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:Warehouse.tax)
}

// optional double year_to_date = 21;
inline bool Warehouse::has_year_to_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Warehouse::set_has_year_to_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Warehouse::clear_has_year_to_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Warehouse::clear_year_to_date() {
  year_to_date_ = 0;
  clear_has_year_to_date();
}
inline double Warehouse::year_to_date() const {
  // @@protoc_insertion_point(field_get:Warehouse.year_to_date)
  return year_to_date_;
}
inline void Warehouse::set_year_to_date(double value) {
  set_has_year_to_date();
  year_to_date_ = value;
  // @@protoc_insertion_point(field_set:Warehouse.year_to_date)
}

// -------------------------------------------------------------------

// District

// required bytes id = 1;
inline bool District::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void District::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void District::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void District::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& District::id() const {
  // @@protoc_insertion_point(field_get:District.id)
  return id_.GetNoArena();
}
inline void District::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.id)
}
#if LANG_CXX11
inline void District::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.id)
}
#endif
inline void District::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.id)
}
inline void District::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.id)
}
inline ::std::string* District::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:District.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_id() {
  // @@protoc_insertion_point(field_release:District.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:District.id)
}

// required bytes warehouse_id = 2;
inline bool District::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void District::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void District::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void District::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& District::warehouse_id() const {
  // @@protoc_insertion_point(field_get:District.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void District::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.warehouse_id)
}
#if LANG_CXX11
inline void District::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.warehouse_id)
}
#endif
inline void District::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.warehouse_id)
}
inline void District::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.warehouse_id)
}
inline ::std::string* District::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:District.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:District.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:District.warehouse_id)
}

// optional bytes name = 10;
inline bool District::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void District::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void District::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void District::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& District::name() const {
  // @@protoc_insertion_point(field_get:District.name)
  return name_.GetNoArena();
}
inline void District::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.name)
}
#if LANG_CXX11
inline void District::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.name)
}
#endif
inline void District::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.name)
}
inline void District::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.name)
}
inline ::std::string* District::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:District.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_name() {
  // @@protoc_insertion_point(field_release:District.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:District.name)
}

// optional bytes street_1 = 11;
inline bool District::has_street_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void District::set_has_street_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void District::clear_has_street_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void District::clear_street_1() {
  street_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_1();
}
inline const ::std::string& District::street_1() const {
  // @@protoc_insertion_point(field_get:District.street_1)
  return street_1_.GetNoArena();
}
inline void District::set_street_1(const ::std::string& value) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.street_1)
}
#if LANG_CXX11
inline void District::set_street_1(::std::string&& value) {
  set_has_street_1();
  street_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.street_1)
}
#endif
inline void District::set_street_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.street_1)
}
inline void District::set_street_1(const void* value, size_t size) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.street_1)
}
inline ::std::string* District::mutable_street_1() {
  set_has_street_1();
  // @@protoc_insertion_point(field_mutable:District.street_1)
  return street_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_street_1() {
  // @@protoc_insertion_point(field_release:District.street_1)
  if (!has_street_1()) {
    return NULL;
  }
  clear_has_street_1();
  return street_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_street_1(::std::string* street_1) {
  if (street_1 != NULL) {
    set_has_street_1();
  } else {
    clear_has_street_1();
  }
  street_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_1);
  // @@protoc_insertion_point(field_set_allocated:District.street_1)
}

// optional bytes street_2 = 12;
inline bool District::has_street_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void District::set_has_street_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void District::clear_has_street_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void District::clear_street_2() {
  street_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_2();
}
inline const ::std::string& District::street_2() const {
  // @@protoc_insertion_point(field_get:District.street_2)
  return street_2_.GetNoArena();
}
inline void District::set_street_2(const ::std::string& value) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.street_2)
}
#if LANG_CXX11
inline void District::set_street_2(::std::string&& value) {
  set_has_street_2();
  street_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.street_2)
}
#endif
inline void District::set_street_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.street_2)
}
inline void District::set_street_2(const void* value, size_t size) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.street_2)
}
inline ::std::string* District::mutable_street_2() {
  set_has_street_2();
  // @@protoc_insertion_point(field_mutable:District.street_2)
  return street_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_street_2() {
  // @@protoc_insertion_point(field_release:District.street_2)
  if (!has_street_2()) {
    return NULL;
  }
  clear_has_street_2();
  return street_2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_street_2(::std::string* street_2) {
  if (street_2 != NULL) {
    set_has_street_2();
  } else {
    clear_has_street_2();
  }
  street_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_2);
  // @@protoc_insertion_point(field_set_allocated:District.street_2)
}

// optional bytes city = 13;
inline bool District::has_city() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void District::set_has_city() {
  _has_bits_[0] |= 0x00000020u;
}
inline void District::clear_has_city() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void District::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& District::city() const {
  // @@protoc_insertion_point(field_get:District.city)
  return city_.GetNoArena();
}
inline void District::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.city)
}
#if LANG_CXX11
inline void District::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.city)
}
#endif
inline void District::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.city)
}
inline void District::set_city(const void* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.city)
}
inline ::std::string* District::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:District.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_city() {
  // @@protoc_insertion_point(field_release:District.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:District.city)
}

// optional bytes state = 14;
inline bool District::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void District::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void District::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void District::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& District::state() const {
  // @@protoc_insertion_point(field_get:District.state)
  return state_.GetNoArena();
}
inline void District::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.state)
}
#if LANG_CXX11
inline void District::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.state)
}
#endif
inline void District::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.state)
}
inline void District::set_state(const void* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.state)
}
inline ::std::string* District::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:District.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_state() {
  // @@protoc_insertion_point(field_release:District.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:District.state)
}

// optional bytes zip = 15;
inline bool District::has_zip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void District::set_has_zip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void District::clear_has_zip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void District::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip();
}
inline const ::std::string& District::zip() const {
  // @@protoc_insertion_point(field_get:District.zip)
  return zip_.GetNoArena();
}
inline void District::set_zip(const ::std::string& value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:District.zip)
}
#if LANG_CXX11
inline void District::set_zip(::std::string&& value) {
  set_has_zip();
  zip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:District.zip)
}
#endif
inline void District::set_zip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:District.zip)
}
inline void District::set_zip(const void* value, size_t size) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:District.zip)
}
inline ::std::string* District::mutable_zip() {
  set_has_zip();
  // @@protoc_insertion_point(field_mutable:District.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* District::release_zip() {
  // @@protoc_insertion_point(field_release:District.zip)
  if (!has_zip()) {
    return NULL;
  }
  clear_has_zip();
  return zip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void District::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    set_has_zip();
  } else {
    clear_has_zip();
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:District.zip)
}

// optional double tax = 20;
inline bool District::has_tax() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void District::set_has_tax() {
  _has_bits_[0] |= 0x00000200u;
}
inline void District::clear_has_tax() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void District::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline double District::tax() const {
  // @@protoc_insertion_point(field_get:District.tax)
  return tax_;
}
inline void District::set_tax(double value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:District.tax)
}

// optional double year_to_date = 21;
inline bool District::has_year_to_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void District::set_has_year_to_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void District::clear_has_year_to_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void District::clear_year_to_date() {
  year_to_date_ = 0;
  clear_has_year_to_date();
}
inline double District::year_to_date() const {
  // @@protoc_insertion_point(field_get:District.year_to_date)
  return year_to_date_;
}
inline void District::set_year_to_date(double value) {
  set_has_year_to_date();
  year_to_date_ = value;
  // @@protoc_insertion_point(field_set:District.year_to_date)
}

// optional int32 next_order_id = 22;
inline bool District::has_next_order_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void District::set_has_next_order_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void District::clear_has_next_order_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void District::clear_next_order_id() {
  next_order_id_ = 0;
  clear_has_next_order_id();
}
inline ::google::protobuf::int32 District::next_order_id() const {
  // @@protoc_insertion_point(field_get:District.next_order_id)
  return next_order_id_;
}
inline void District::set_next_order_id(::google::protobuf::int32 value) {
  set_has_next_order_id();
  next_order_id_ = value;
  // @@protoc_insertion_point(field_set:District.next_order_id)
}

// -------------------------------------------------------------------

// Customer

// required bytes id = 1;
inline bool Customer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Customer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Customer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Customer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Customer::id() const {
  // @@protoc_insertion_point(field_get:Customer.id)
  return id_.GetNoArena();
}
inline void Customer::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.id)
}
#if LANG_CXX11
inline void Customer::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.id)
}
#endif
inline void Customer::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.id)
}
inline void Customer::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.id)
}
inline ::std::string* Customer::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Customer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_id() {
  // @@protoc_insertion_point(field_release:Customer.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Customer.id)
}

// required bytes district_id = 2;
inline bool Customer::has_district_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Customer::set_has_district_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Customer::clear_has_district_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Customer::clear_district_id() {
  district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_id();
}
inline const ::std::string& Customer::district_id() const {
  // @@protoc_insertion_point(field_get:Customer.district_id)
  return district_id_.GetNoArena();
}
inline void Customer::set_district_id(const ::std::string& value) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.district_id)
}
#if LANG_CXX11
inline void Customer::set_district_id(::std::string&& value) {
  set_has_district_id();
  district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.district_id)
}
#endif
inline void Customer::set_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.district_id)
}
inline void Customer::set_district_id(const void* value, size_t size) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.district_id)
}
inline ::std::string* Customer::mutable_district_id() {
  set_has_district_id();
  // @@protoc_insertion_point(field_mutable:Customer.district_id)
  return district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_district_id() {
  // @@protoc_insertion_point(field_release:Customer.district_id)
  if (!has_district_id()) {
    return NULL;
  }
  clear_has_district_id();
  return district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_district_id(::std::string* district_id) {
  if (district_id != NULL) {
    set_has_district_id();
  } else {
    clear_has_district_id();
  }
  district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_id);
  // @@protoc_insertion_point(field_set_allocated:Customer.district_id)
}

// required bytes warehouse_id = 3;
inline bool Customer::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Customer::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Customer::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Customer::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& Customer::warehouse_id() const {
  // @@protoc_insertion_point(field_get:Customer.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void Customer::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.warehouse_id)
}
#if LANG_CXX11
inline void Customer::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.warehouse_id)
}
#endif
inline void Customer::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.warehouse_id)
}
inline void Customer::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.warehouse_id)
}
inline ::std::string* Customer::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:Customer.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:Customer.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:Customer.warehouse_id)
}

// optional bytes first = 10;
inline bool Customer::has_first() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Customer::set_has_first() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Customer::clear_has_first() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Customer::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first();
}
inline const ::std::string& Customer::first() const {
  // @@protoc_insertion_point(field_get:Customer.first)
  return first_.GetNoArena();
}
inline void Customer::set_first(const ::std::string& value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.first)
}
#if LANG_CXX11
inline void Customer::set_first(::std::string&& value) {
  set_has_first();
  first_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.first)
}
#endif
inline void Customer::set_first(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.first)
}
inline void Customer::set_first(const void* value, size_t size) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.first)
}
inline ::std::string* Customer::mutable_first() {
  set_has_first();
  // @@protoc_insertion_point(field_mutable:Customer.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_first() {
  // @@protoc_insertion_point(field_release:Customer.first)
  if (!has_first()) {
    return NULL;
  }
  clear_has_first();
  return first_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    set_has_first();
  } else {
    clear_has_first();
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:Customer.first)
}

// optional bytes middle = 11;
inline bool Customer::has_middle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Customer::set_has_middle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Customer::clear_has_middle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Customer::clear_middle() {
  middle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_middle();
}
inline const ::std::string& Customer::middle() const {
  // @@protoc_insertion_point(field_get:Customer.middle)
  return middle_.GetNoArena();
}
inline void Customer::set_middle(const ::std::string& value) {
  set_has_middle();
  middle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.middle)
}
#if LANG_CXX11
inline void Customer::set_middle(::std::string&& value) {
  set_has_middle();
  middle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.middle)
}
#endif
inline void Customer::set_middle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_middle();
  middle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.middle)
}
inline void Customer::set_middle(const void* value, size_t size) {
  set_has_middle();
  middle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.middle)
}
inline ::std::string* Customer::mutable_middle() {
  set_has_middle();
  // @@protoc_insertion_point(field_mutable:Customer.middle)
  return middle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_middle() {
  // @@protoc_insertion_point(field_release:Customer.middle)
  if (!has_middle()) {
    return NULL;
  }
  clear_has_middle();
  return middle_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_middle(::std::string* middle) {
  if (middle != NULL) {
    set_has_middle();
  } else {
    clear_has_middle();
  }
  middle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), middle);
  // @@protoc_insertion_point(field_set_allocated:Customer.middle)
}

// required bytes last = 12;
inline bool Customer::has_last() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Customer::set_has_last() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Customer::clear_has_last() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Customer::clear_last() {
  last_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last();
}
inline const ::std::string& Customer::last() const {
  // @@protoc_insertion_point(field_get:Customer.last)
  return last_.GetNoArena();
}
inline void Customer::set_last(const ::std::string& value) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.last)
}
#if LANG_CXX11
inline void Customer::set_last(::std::string&& value) {
  set_has_last();
  last_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.last)
}
#endif
inline void Customer::set_last(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.last)
}
inline void Customer::set_last(const void* value, size_t size) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.last)
}
inline ::std::string* Customer::mutable_last() {
  set_has_last();
  // @@protoc_insertion_point(field_mutable:Customer.last)
  return last_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_last() {
  // @@protoc_insertion_point(field_release:Customer.last)
  if (!has_last()) {
    return NULL;
  }
  clear_has_last();
  return last_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_last(::std::string* last) {
  if (last != NULL) {
    set_has_last();
  } else {
    clear_has_last();
  }
  last_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last);
  // @@protoc_insertion_point(field_set_allocated:Customer.last)
}

// optional bytes street_1 = 13;
inline bool Customer::has_street_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Customer::set_has_street_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Customer::clear_has_street_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Customer::clear_street_1() {
  street_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_1();
}
inline const ::std::string& Customer::street_1() const {
  // @@protoc_insertion_point(field_get:Customer.street_1)
  return street_1_.GetNoArena();
}
inline void Customer::set_street_1(const ::std::string& value) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.street_1)
}
#if LANG_CXX11
inline void Customer::set_street_1(::std::string&& value) {
  set_has_street_1();
  street_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.street_1)
}
#endif
inline void Customer::set_street_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.street_1)
}
inline void Customer::set_street_1(const void* value, size_t size) {
  set_has_street_1();
  street_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.street_1)
}
inline ::std::string* Customer::mutable_street_1() {
  set_has_street_1();
  // @@protoc_insertion_point(field_mutable:Customer.street_1)
  return street_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_street_1() {
  // @@protoc_insertion_point(field_release:Customer.street_1)
  if (!has_street_1()) {
    return NULL;
  }
  clear_has_street_1();
  return street_1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_street_1(::std::string* street_1) {
  if (street_1 != NULL) {
    set_has_street_1();
  } else {
    clear_has_street_1();
  }
  street_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_1);
  // @@protoc_insertion_point(field_set_allocated:Customer.street_1)
}

// optional bytes street_2 = 14;
inline bool Customer::has_street_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Customer::set_has_street_2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Customer::clear_has_street_2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Customer::clear_street_2() {
  street_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_2();
}
inline const ::std::string& Customer::street_2() const {
  // @@protoc_insertion_point(field_get:Customer.street_2)
  return street_2_.GetNoArena();
}
inline void Customer::set_street_2(const ::std::string& value) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.street_2)
}
#if LANG_CXX11
inline void Customer::set_street_2(::std::string&& value) {
  set_has_street_2();
  street_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.street_2)
}
#endif
inline void Customer::set_street_2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.street_2)
}
inline void Customer::set_street_2(const void* value, size_t size) {
  set_has_street_2();
  street_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.street_2)
}
inline ::std::string* Customer::mutable_street_2() {
  set_has_street_2();
  // @@protoc_insertion_point(field_mutable:Customer.street_2)
  return street_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_street_2() {
  // @@protoc_insertion_point(field_release:Customer.street_2)
  if (!has_street_2()) {
    return NULL;
  }
  clear_has_street_2();
  return street_2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_street_2(::std::string* street_2) {
  if (street_2 != NULL) {
    set_has_street_2();
  } else {
    clear_has_street_2();
  }
  street_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_2);
  // @@protoc_insertion_point(field_set_allocated:Customer.street_2)
}

// optional bytes city = 15;
inline bool Customer::has_city() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Customer::set_has_city() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Customer::clear_has_city() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Customer::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& Customer::city() const {
  // @@protoc_insertion_point(field_get:Customer.city)
  return city_.GetNoArena();
}
inline void Customer::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.city)
}
#if LANG_CXX11
inline void Customer::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.city)
}
#endif
inline void Customer::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.city)
}
inline void Customer::set_city(const void* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.city)
}
inline ::std::string* Customer::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:Customer.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_city() {
  // @@protoc_insertion_point(field_release:Customer.city)
  if (!has_city()) {
    return NULL;
  }
  clear_has_city();
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Customer.city)
}

// optional bytes state = 16;
inline bool Customer::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Customer::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Customer::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Customer::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& Customer::state() const {
  // @@protoc_insertion_point(field_get:Customer.state)
  return state_.GetNoArena();
}
inline void Customer::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.state)
}
#if LANG_CXX11
inline void Customer::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.state)
}
#endif
inline void Customer::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.state)
}
inline void Customer::set_state(const void* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.state)
}
inline ::std::string* Customer::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:Customer.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_state() {
  // @@protoc_insertion_point(field_release:Customer.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Customer.state)
}

// optional bytes zip = 17;
inline bool Customer::has_zip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Customer::set_has_zip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Customer::clear_has_zip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Customer::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip();
}
inline const ::std::string& Customer::zip() const {
  // @@protoc_insertion_point(field_get:Customer.zip)
  return zip_.GetNoArena();
}
inline void Customer::set_zip(const ::std::string& value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.zip)
}
#if LANG_CXX11
inline void Customer::set_zip(::std::string&& value) {
  set_has_zip();
  zip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.zip)
}
#endif
inline void Customer::set_zip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.zip)
}
inline void Customer::set_zip(const void* value, size_t size) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.zip)
}
inline ::std::string* Customer::mutable_zip() {
  set_has_zip();
  // @@protoc_insertion_point(field_mutable:Customer.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_zip() {
  // @@protoc_insertion_point(field_release:Customer.zip)
  if (!has_zip()) {
    return NULL;
  }
  clear_has_zip();
  return zip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    set_has_zip();
  } else {
    clear_has_zip();
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:Customer.zip)
}

// optional int32 since = 20;
inline bool Customer::has_since() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Customer::set_has_since() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Customer::clear_has_since() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Customer::clear_since() {
  since_ = 0;
  clear_has_since();
}
inline ::google::protobuf::int32 Customer::since() const {
  // @@protoc_insertion_point(field_get:Customer.since)
  return since_;
}
inline void Customer::set_since(::google::protobuf::int32 value) {
  set_has_since();
  since_ = value;
  // @@protoc_insertion_point(field_set:Customer.since)
}

// optional bytes credit = 21;
inline bool Customer::has_credit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Customer::set_has_credit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Customer::clear_has_credit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Customer::clear_credit() {
  credit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_credit();
}
inline const ::std::string& Customer::credit() const {
  // @@protoc_insertion_point(field_get:Customer.credit)
  return credit_.GetNoArena();
}
inline void Customer::set_credit(const ::std::string& value) {
  set_has_credit();
  credit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.credit)
}
#if LANG_CXX11
inline void Customer::set_credit(::std::string&& value) {
  set_has_credit();
  credit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.credit)
}
#endif
inline void Customer::set_credit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_credit();
  credit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.credit)
}
inline void Customer::set_credit(const void* value, size_t size) {
  set_has_credit();
  credit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.credit)
}
inline ::std::string* Customer::mutable_credit() {
  set_has_credit();
  // @@protoc_insertion_point(field_mutable:Customer.credit)
  return credit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_credit() {
  // @@protoc_insertion_point(field_release:Customer.credit)
  if (!has_credit()) {
    return NULL;
  }
  clear_has_credit();
  return credit_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_credit(::std::string* credit) {
  if (credit != NULL) {
    set_has_credit();
  } else {
    clear_has_credit();
  }
  credit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), credit);
  // @@protoc_insertion_point(field_set_allocated:Customer.credit)
}

// optional double credit_limit = 22;
inline bool Customer::has_credit_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Customer::set_has_credit_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Customer::clear_has_credit_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Customer::clear_credit_limit() {
  credit_limit_ = 0;
  clear_has_credit_limit();
}
inline double Customer::credit_limit() const {
  // @@protoc_insertion_point(field_get:Customer.credit_limit)
  return credit_limit_;
}
inline void Customer::set_credit_limit(double value) {
  set_has_credit_limit();
  credit_limit_ = value;
  // @@protoc_insertion_point(field_set:Customer.credit_limit)
}

// optional double discount = 23;
inline bool Customer::has_discount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Customer::set_has_discount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Customer::clear_has_discount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Customer::clear_discount() {
  discount_ = 0;
  clear_has_discount();
}
inline double Customer::discount() const {
  // @@protoc_insertion_point(field_get:Customer.discount)
  return discount_;
}
inline void Customer::set_discount(double value) {
  set_has_discount();
  discount_ = value;
  // @@protoc_insertion_point(field_set:Customer.discount)
}

// optional double balance = 24;
inline bool Customer::has_balance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Customer::set_has_balance() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Customer::clear_has_balance() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Customer::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline double Customer::balance() const {
  // @@protoc_insertion_point(field_get:Customer.balance)
  return balance_;
}
inline void Customer::set_balance(double value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:Customer.balance)
}

// optional double year_to_date_payment = 25;
inline bool Customer::has_year_to_date_payment() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Customer::set_has_year_to_date_payment() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Customer::clear_has_year_to_date_payment() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Customer::clear_year_to_date_payment() {
  year_to_date_payment_ = 0;
  clear_has_year_to_date_payment();
}
inline double Customer::year_to_date_payment() const {
  // @@protoc_insertion_point(field_get:Customer.year_to_date_payment)
  return year_to_date_payment_;
}
inline void Customer::set_year_to_date_payment(double value) {
  set_has_year_to_date_payment();
  year_to_date_payment_ = value;
  // @@protoc_insertion_point(field_set:Customer.year_to_date_payment)
}

// optional int32 payment_count = 26;
inline bool Customer::has_payment_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Customer::set_has_payment_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Customer::clear_has_payment_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Customer::clear_payment_count() {
  payment_count_ = 0;
  clear_has_payment_count();
}
inline ::google::protobuf::int32 Customer::payment_count() const {
  // @@protoc_insertion_point(field_get:Customer.payment_count)
  return payment_count_;
}
inline void Customer::set_payment_count(::google::protobuf::int32 value) {
  set_has_payment_count();
  payment_count_ = value;
  // @@protoc_insertion_point(field_set:Customer.payment_count)
}

// optional int32 delivery_count = 27;
inline bool Customer::has_delivery_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Customer::set_has_delivery_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Customer::clear_has_delivery_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Customer::clear_delivery_count() {
  delivery_count_ = 0;
  clear_has_delivery_count();
}
inline ::google::protobuf::int32 Customer::delivery_count() const {
  // @@protoc_insertion_point(field_get:Customer.delivery_count)
  return delivery_count_;
}
inline void Customer::set_delivery_count(::google::protobuf::int32 value) {
  set_has_delivery_count();
  delivery_count_ = value;
  // @@protoc_insertion_point(field_set:Customer.delivery_count)
}

// optional bytes data = 30;
inline bool Customer::has_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Customer::set_has_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Customer::clear_has_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Customer::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Customer::data() const {
  // @@protoc_insertion_point(field_get:Customer.data)
  return data_.GetNoArena();
}
inline void Customer::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Customer.data)
}
#if LANG_CXX11
inline void Customer::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Customer.data)
}
#endif
inline void Customer::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Customer.data)
}
inline void Customer::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Customer.data)
}
inline ::std::string* Customer::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:Customer.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_data() {
  // @@protoc_insertion_point(field_release:Customer.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Customer.data)
}

// -------------------------------------------------------------------

// NewOrder

// required bytes id = 1;
inline bool NewOrder::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewOrder::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewOrder::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewOrder::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& NewOrder::id() const {
  // @@protoc_insertion_point(field_get:NewOrder.id)
  return id_.GetNoArena();
}
inline void NewOrder::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewOrder.id)
}
#if LANG_CXX11
inline void NewOrder::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewOrder.id)
}
#endif
inline void NewOrder::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewOrder.id)
}
inline void NewOrder::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewOrder.id)
}
inline ::std::string* NewOrder::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:NewOrder.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_id() {
  // @@protoc_insertion_point(field_release:NewOrder.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NewOrder.id)
}

// required bytes district_id = 2;
inline bool NewOrder::has_district_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewOrder::set_has_district_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewOrder::clear_has_district_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewOrder::clear_district_id() {
  district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_id();
}
inline const ::std::string& NewOrder::district_id() const {
  // @@protoc_insertion_point(field_get:NewOrder.district_id)
  return district_id_.GetNoArena();
}
inline void NewOrder::set_district_id(const ::std::string& value) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewOrder.district_id)
}
#if LANG_CXX11
inline void NewOrder::set_district_id(::std::string&& value) {
  set_has_district_id();
  district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewOrder.district_id)
}
#endif
inline void NewOrder::set_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewOrder.district_id)
}
inline void NewOrder::set_district_id(const void* value, size_t size) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewOrder.district_id)
}
inline ::std::string* NewOrder::mutable_district_id() {
  set_has_district_id();
  // @@protoc_insertion_point(field_mutable:NewOrder.district_id)
  return district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_district_id() {
  // @@protoc_insertion_point(field_release:NewOrder.district_id)
  if (!has_district_id()) {
    return NULL;
  }
  clear_has_district_id();
  return district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_district_id(::std::string* district_id) {
  if (district_id != NULL) {
    set_has_district_id();
  } else {
    clear_has_district_id();
  }
  district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_id);
  // @@protoc_insertion_point(field_set_allocated:NewOrder.district_id)
}

// required bytes warehouse_id = 3;
inline bool NewOrder::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewOrder::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewOrder::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewOrder::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& NewOrder::warehouse_id() const {
  // @@protoc_insertion_point(field_get:NewOrder.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void NewOrder::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewOrder.warehouse_id)
}
#if LANG_CXX11
inline void NewOrder::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewOrder.warehouse_id)
}
#endif
inline void NewOrder::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewOrder.warehouse_id)
}
inline void NewOrder::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewOrder.warehouse_id)
}
inline ::std::string* NewOrder::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:NewOrder.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:NewOrder.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:NewOrder.warehouse_id)
}

// -------------------------------------------------------------------

// Order

// required bytes id = 1;
inline bool Order::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:Order.id)
  return id_.GetNoArena();
}
inline void Order::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Order.id)
}
#if LANG_CXX11
inline void Order::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Order.id)
}
#endif
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Order.id)
}
inline void Order::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Order.id)
}
inline ::std::string* Order::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Order.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:Order.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Order.id)
}

// required bytes district_id = 2;
inline bool Order::has_district_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_district_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_district_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_district_id() {
  district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_id();
}
inline const ::std::string& Order::district_id() const {
  // @@protoc_insertion_point(field_get:Order.district_id)
  return district_id_.GetNoArena();
}
inline void Order::set_district_id(const ::std::string& value) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Order.district_id)
}
#if LANG_CXX11
inline void Order::set_district_id(::std::string&& value) {
  set_has_district_id();
  district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Order.district_id)
}
#endif
inline void Order::set_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Order.district_id)
}
inline void Order::set_district_id(const void* value, size_t size) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Order.district_id)
}
inline ::std::string* Order::mutable_district_id() {
  set_has_district_id();
  // @@protoc_insertion_point(field_mutable:Order.district_id)
  return district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_district_id() {
  // @@protoc_insertion_point(field_release:Order.district_id)
  if (!has_district_id()) {
    return NULL;
  }
  clear_has_district_id();
  return district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_district_id(::std::string* district_id) {
  if (district_id != NULL) {
    set_has_district_id();
  } else {
    clear_has_district_id();
  }
  district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_id);
  // @@protoc_insertion_point(field_set_allocated:Order.district_id)
}

// required bytes warehouse_id = 3;
inline bool Order::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& Order::warehouse_id() const {
  // @@protoc_insertion_point(field_get:Order.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void Order::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Order.warehouse_id)
}
#if LANG_CXX11
inline void Order::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Order.warehouse_id)
}
#endif
inline void Order::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Order.warehouse_id)
}
inline void Order::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Order.warehouse_id)
}
inline ::std::string* Order::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:Order.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:Order.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:Order.warehouse_id)
}

// required bytes customer_id = 4;
inline bool Order::has_customer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order::set_has_customer_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
inline const ::std::string& Order::customer_id() const {
  // @@protoc_insertion_point(field_get:Order.customer_id)
  return customer_id_.GetNoArena();
}
inline void Order::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Order.customer_id)
}
#if LANG_CXX11
inline void Order::set_customer_id(::std::string&& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Order.customer_id)
}
#endif
inline void Order::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Order.customer_id)
}
inline void Order::set_customer_id(const void* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Order.customer_id)
}
inline ::std::string* Order::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:Order.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_customer_id() {
  // @@protoc_insertion_point(field_release:Order.customer_id)
  if (!has_customer_id()) {
    return NULL;
  }
  clear_has_customer_id();
  return customer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:Order.customer_id)
}

// optional double entry_date = 10;
inline bool Order::has_entry_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Order::set_has_entry_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Order::clear_has_entry_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Order::clear_entry_date() {
  entry_date_ = 0;
  clear_has_entry_date();
}
inline double Order::entry_date() const {
  // @@protoc_insertion_point(field_get:Order.entry_date)
  return entry_date_;
}
inline void Order::set_entry_date(double value) {
  set_has_entry_date();
  entry_date_ = value;
  // @@protoc_insertion_point(field_set:Order.entry_date)
}

// optional int32 carrier_id = 11;
inline bool Order::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Order::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Order::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Order::clear_carrier_id() {
  carrier_id_ = 0;
  clear_has_carrier_id();
}
inline ::google::protobuf::int32 Order::carrier_id() const {
  // @@protoc_insertion_point(field_get:Order.carrier_id)
  return carrier_id_;
}
inline void Order::set_carrier_id(::google::protobuf::int32 value) {
  set_has_carrier_id();
  carrier_id_ = value;
  // @@protoc_insertion_point(field_set:Order.carrier_id)
}

// optional int32 order_line_count = 12;
inline bool Order::has_order_line_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Order::set_has_order_line_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Order::clear_has_order_line_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Order::clear_order_line_count() {
  order_line_count_ = 0;
  clear_has_order_line_count();
}
inline ::google::protobuf::int32 Order::order_line_count() const {
  // @@protoc_insertion_point(field_get:Order.order_line_count)
  return order_line_count_;
}
inline void Order::set_order_line_count(::google::protobuf::int32 value) {
  set_has_order_line_count();
  order_line_count_ = value;
  // @@protoc_insertion_point(field_set:Order.order_line_count)
}

// optional bool all_items_local = 13;
inline bool Order::has_all_items_local() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Order::set_has_all_items_local() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Order::clear_has_all_items_local() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Order::clear_all_items_local() {
  all_items_local_ = false;
  clear_has_all_items_local();
}
inline bool Order::all_items_local() const {
  // @@protoc_insertion_point(field_get:Order.all_items_local)
  return all_items_local_;
}
inline void Order::set_all_items_local(bool value) {
  set_has_all_items_local();
  all_items_local_ = value;
  // @@protoc_insertion_point(field_set:Order.all_items_local)
}

// repeated uint64 order_line_ptr = 14;
inline int Order::order_line_ptr_size() const {
  return order_line_ptr_.size();
}
inline void Order::clear_order_line_ptr() {
  order_line_ptr_.Clear();
}
inline ::google::protobuf::uint64 Order::order_line_ptr(int index) const {
  // @@protoc_insertion_point(field_get:Order.order_line_ptr)
  return order_line_ptr_.Get(index);
}
inline void Order::set_order_line_ptr(int index, ::google::protobuf::uint64 value) {
  order_line_ptr_.Set(index, value);
  // @@protoc_insertion_point(field_set:Order.order_line_ptr)
}
inline void Order::add_order_line_ptr(::google::protobuf::uint64 value) {
  order_line_ptr_.Add(value);
  // @@protoc_insertion_point(field_add:Order.order_line_ptr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Order::order_line_ptr() const {
  // @@protoc_insertion_point(field_list:Order.order_line_ptr)
  return order_line_ptr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Order::mutable_order_line_ptr() {
  // @@protoc_insertion_point(field_mutable_list:Order.order_line_ptr)
  return &order_line_ptr_;
}

// -------------------------------------------------------------------

// OrderLine

// required bytes order_id = 1;
inline bool OrderLine::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderLine::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderLine::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderLine::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& OrderLine::order_id() const {
  // @@protoc_insertion_point(field_get:OrderLine.order_id)
  return order_id_.GetNoArena();
}
inline void OrderLine::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.order_id)
}
#if LANG_CXX11
inline void OrderLine::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.order_id)
}
#endif
inline void OrderLine::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.order_id)
}
inline void OrderLine::set_order_id(const void* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.order_id)
}
inline ::std::string* OrderLine::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:OrderLine.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_order_id() {
  // @@protoc_insertion_point(field_release:OrderLine.order_id)
  if (!has_order_id()) {
    return NULL;
  }
  clear_has_order_id();
  return order_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.order_id)
}

// required bytes district_id = 2;
inline bool OrderLine::has_district_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderLine::set_has_district_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderLine::clear_has_district_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderLine::clear_district_id() {
  district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_id();
}
inline const ::std::string& OrderLine::district_id() const {
  // @@protoc_insertion_point(field_get:OrderLine.district_id)
  return district_id_.GetNoArena();
}
inline void OrderLine::set_district_id(const ::std::string& value) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.district_id)
}
#if LANG_CXX11
inline void OrderLine::set_district_id(::std::string&& value) {
  set_has_district_id();
  district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.district_id)
}
#endif
inline void OrderLine::set_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.district_id)
}
inline void OrderLine::set_district_id(const void* value, size_t size) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.district_id)
}
inline ::std::string* OrderLine::mutable_district_id() {
  set_has_district_id();
  // @@protoc_insertion_point(field_mutable:OrderLine.district_id)
  return district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_district_id() {
  // @@protoc_insertion_point(field_release:OrderLine.district_id)
  if (!has_district_id()) {
    return NULL;
  }
  clear_has_district_id();
  return district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_district_id(::std::string* district_id) {
  if (district_id != NULL) {
    set_has_district_id();
  } else {
    clear_has_district_id();
  }
  district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_id);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.district_id)
}

// required bytes warehouse_id = 3;
inline bool OrderLine::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderLine::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderLine::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderLine::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& OrderLine::warehouse_id() const {
  // @@protoc_insertion_point(field_get:OrderLine.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void OrderLine::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.warehouse_id)
}
#if LANG_CXX11
inline void OrderLine::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.warehouse_id)
}
#endif
inline void OrderLine::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.warehouse_id)
}
inline void OrderLine::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.warehouse_id)
}
inline ::std::string* OrderLine::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:OrderLine.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:OrderLine.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.warehouse_id)
}

// required bytes item_id = 4;
inline bool OrderLine::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderLine::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderLine::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderLine::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_id();
}
inline const ::std::string& OrderLine::item_id() const {
  // @@protoc_insertion_point(field_get:OrderLine.item_id)
  return item_id_.GetNoArena();
}
inline void OrderLine::set_item_id(const ::std::string& value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.item_id)
}
#if LANG_CXX11
inline void OrderLine::set_item_id(::std::string&& value) {
  set_has_item_id();
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.item_id)
}
#endif
inline void OrderLine::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.item_id)
}
inline void OrderLine::set_item_id(const void* value, size_t size) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.item_id)
}
inline ::std::string* OrderLine::mutable_item_id() {
  set_has_item_id();
  // @@protoc_insertion_point(field_mutable:OrderLine.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_item_id() {
  // @@protoc_insertion_point(field_release:OrderLine.item_id)
  if (!has_item_id()) {
    return NULL;
  }
  clear_has_item_id();
  return item_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    set_has_item_id();
  } else {
    clear_has_item_id();
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.item_id)
}

// required bytes supply_warehouse_id = 5;
inline bool OrderLine::has_supply_warehouse_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderLine::set_has_supply_warehouse_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderLine::clear_has_supply_warehouse_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderLine::clear_supply_warehouse_id() {
  supply_warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_supply_warehouse_id();
}
inline const ::std::string& OrderLine::supply_warehouse_id() const {
  // @@protoc_insertion_point(field_get:OrderLine.supply_warehouse_id)
  return supply_warehouse_id_.GetNoArena();
}
inline void OrderLine::set_supply_warehouse_id(const ::std::string& value) {
  set_has_supply_warehouse_id();
  supply_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.supply_warehouse_id)
}
#if LANG_CXX11
inline void OrderLine::set_supply_warehouse_id(::std::string&& value) {
  set_has_supply_warehouse_id();
  supply_warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.supply_warehouse_id)
}
#endif
inline void OrderLine::set_supply_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_supply_warehouse_id();
  supply_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.supply_warehouse_id)
}
inline void OrderLine::set_supply_warehouse_id(const void* value, size_t size) {
  set_has_supply_warehouse_id();
  supply_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.supply_warehouse_id)
}
inline ::std::string* OrderLine::mutable_supply_warehouse_id() {
  set_has_supply_warehouse_id();
  // @@protoc_insertion_point(field_mutable:OrderLine.supply_warehouse_id)
  return supply_warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_supply_warehouse_id() {
  // @@protoc_insertion_point(field_release:OrderLine.supply_warehouse_id)
  if (!has_supply_warehouse_id()) {
    return NULL;
  }
  clear_has_supply_warehouse_id();
  return supply_warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_supply_warehouse_id(::std::string* supply_warehouse_id) {
  if (supply_warehouse_id != NULL) {
    set_has_supply_warehouse_id();
  } else {
    clear_has_supply_warehouse_id();
  }
  supply_warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supply_warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.supply_warehouse_id)
}

// optional int32 number = 10;
inline bool OrderLine::has_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderLine::set_has_number() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderLine::clear_has_number() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderLine::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 OrderLine::number() const {
  // @@protoc_insertion_point(field_get:OrderLine.number)
  return number_;
}
inline void OrderLine::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:OrderLine.number)
}

// optional double delivery_date = 11;
inline bool OrderLine::has_delivery_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderLine::set_has_delivery_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderLine::clear_has_delivery_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderLine::clear_delivery_date() {
  delivery_date_ = 0;
  clear_has_delivery_date();
}
inline double OrderLine::delivery_date() const {
  // @@protoc_insertion_point(field_get:OrderLine.delivery_date)
  return delivery_date_;
}
inline void OrderLine::set_delivery_date(double value) {
  set_has_delivery_date();
  delivery_date_ = value;
  // @@protoc_insertion_point(field_set:OrderLine.delivery_date)
}

// optional int32 quantity = 12;
inline bool OrderLine::has_quantity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderLine::set_has_quantity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderLine::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderLine::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline ::google::protobuf::int32 OrderLine::quantity() const {
  // @@protoc_insertion_point(field_get:OrderLine.quantity)
  return quantity_;
}
inline void OrderLine::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:OrderLine.quantity)
}

// optional double amount = 13;
inline bool OrderLine::has_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderLine::set_has_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderLine::clear_has_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderLine::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double OrderLine::amount() const {
  // @@protoc_insertion_point(field_get:OrderLine.amount)
  return amount_;
}
inline void OrderLine::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:OrderLine.amount)
}

// optional bytes district_information = 14;
inline bool OrderLine::has_district_information() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderLine::set_has_district_information() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderLine::clear_has_district_information() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderLine::clear_district_information() {
  district_information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_information();
}
inline const ::std::string& OrderLine::district_information() const {
  // @@protoc_insertion_point(field_get:OrderLine.district_information)
  return district_information_.GetNoArena();
}
inline void OrderLine::set_district_information(const ::std::string& value) {
  set_has_district_information();
  district_information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OrderLine.district_information)
}
#if LANG_CXX11
inline void OrderLine::set_district_information(::std::string&& value) {
  set_has_district_information();
  district_information_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OrderLine.district_information)
}
#endif
inline void OrderLine::set_district_information(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_information();
  district_information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OrderLine.district_information)
}
inline void OrderLine::set_district_information(const void* value, size_t size) {
  set_has_district_information();
  district_information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OrderLine.district_information)
}
inline ::std::string* OrderLine::mutable_district_information() {
  set_has_district_information();
  // @@protoc_insertion_point(field_mutable:OrderLine.district_information)
  return district_information_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderLine::release_district_information() {
  // @@protoc_insertion_point(field_release:OrderLine.district_information)
  if (!has_district_information()) {
    return NULL;
  }
  clear_has_district_information();
  return district_information_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderLine::set_allocated_district_information(::std::string* district_information) {
  if (district_information != NULL) {
    set_has_district_information();
  } else {
    clear_has_district_information();
  }
  district_information_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_information);
  // @@protoc_insertion_point(field_set_allocated:OrderLine.district_information)
}

// -------------------------------------------------------------------

// Item

// required bytes id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Item::id() const {
  // @@protoc_insertion_point(field_get:Item.id)
  return id_.GetNoArena();
}
inline void Item::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Item.id)
}
#if LANG_CXX11
inline void Item::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Item.id)
}
#endif
inline void Item::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Item.id)
}
inline void Item::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Item.id)
}
inline ::std::string* Item::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Item.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_id() {
  // @@protoc_insertion_point(field_release:Item.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Item.id)
}

// optional bytes name = 10;
inline bool Item::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:Item.name)
  return name_.GetNoArena();
}
inline void Item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Item.name)
}
#if LANG_CXX11
inline void Item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Item.name)
}
#endif
inline void Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Item.name)
}
inline void Item::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Item.name)
}
inline ::std::string* Item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:Item.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Item.name)
}

// optional double price = 11;
inline bool Item::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Item::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Item::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Item::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Item::price() const {
  // @@protoc_insertion_point(field_get:Item.price)
  return price_;
}
inline void Item::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Item.price)
}

// optional bytes data = 20;
inline bool Item::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Item::data() const {
  // @@protoc_insertion_point(field_get:Item.data)
  return data_.GetNoArena();
}
inline void Item::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Item.data)
}
#if LANG_CXX11
inline void Item::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Item.data)
}
#endif
inline void Item::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Item.data)
}
inline void Item::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Item.data)
}
inline ::std::string* Item::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:Item.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_data() {
  // @@protoc_insertion_point(field_release:Item.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Item.data)
}

// -------------------------------------------------------------------

// Stock

// required bytes id = 1;
inline bool Stock::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stock::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stock::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stock::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Stock::id() const {
  // @@protoc_insertion_point(field_get:Stock.id)
  return id_.GetNoArena();
}
inline void Stock::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stock.id)
}
#if LANG_CXX11
inline void Stock::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stock.id)
}
#endif
inline void Stock::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stock.id)
}
inline void Stock::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stock.id)
}
inline ::std::string* Stock::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Stock.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_id() {
  // @@protoc_insertion_point(field_release:Stock.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Stock.id)
}

// required bytes item_id = 2;
inline bool Stock::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stock::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stock::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stock::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_id();
}
inline const ::std::string& Stock::item_id() const {
  // @@protoc_insertion_point(field_get:Stock.item_id)
  return item_id_.GetNoArena();
}
inline void Stock::set_item_id(const ::std::string& value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stock.item_id)
}
#if LANG_CXX11
inline void Stock::set_item_id(::std::string&& value) {
  set_has_item_id();
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stock.item_id)
}
#endif
inline void Stock::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stock.item_id)
}
inline void Stock::set_item_id(const void* value, size_t size) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stock.item_id)
}
inline ::std::string* Stock::mutable_item_id() {
  set_has_item_id();
  // @@protoc_insertion_point(field_mutable:Stock.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_item_id() {
  // @@protoc_insertion_point(field_release:Stock.item_id)
  if (!has_item_id()) {
    return NULL;
  }
  clear_has_item_id();
  return item_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    set_has_item_id();
  } else {
    clear_has_item_id();
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:Stock.item_id)
}

// required bytes warehouse_id = 3;
inline bool Stock::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stock::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stock::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stock::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& Stock::warehouse_id() const {
  // @@protoc_insertion_point(field_get:Stock.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void Stock::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stock.warehouse_id)
}
#if LANG_CXX11
inline void Stock::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stock.warehouse_id)
}
#endif
inline void Stock::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stock.warehouse_id)
}
inline void Stock::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stock.warehouse_id)
}
inline ::std::string* Stock::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:Stock.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:Stock.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:Stock.warehouse_id)
}

// optional int32 quantity = 10;
inline bool Stock::has_quantity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stock::set_has_quantity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stock::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stock::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline ::google::protobuf::int32 Stock::quantity() const {
  // @@protoc_insertion_point(field_get:Stock.quantity)
  return quantity_;
}
inline void Stock::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Stock.quantity)
}

// repeated bytes districts = 11;
inline int Stock::districts_size() const {
  return districts_.size();
}
inline void Stock::clear_districts() {
  districts_.Clear();
}
inline const ::std::string& Stock::districts(int index) const {
  // @@protoc_insertion_point(field_get:Stock.districts)
  return districts_.Get(index);
}
inline ::std::string* Stock::mutable_districts(int index) {
  // @@protoc_insertion_point(field_mutable:Stock.districts)
  return districts_.Mutable(index);
}
inline void Stock::set_districts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Stock.districts)
  districts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Stock::set_districts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Stock.districts)
  districts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Stock::set_districts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  districts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Stock.districts)
}
inline void Stock::set_districts(int index, const void* value, size_t size) {
  districts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Stock.districts)
}
inline ::std::string* Stock::add_districts() {
  // @@protoc_insertion_point(field_add_mutable:Stock.districts)
  return districts_.Add();
}
inline void Stock::add_districts(const ::std::string& value) {
  districts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Stock.districts)
}
#if LANG_CXX11
inline void Stock::add_districts(::std::string&& value) {
  districts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Stock.districts)
}
#endif
inline void Stock::add_districts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  districts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Stock.districts)
}
inline void Stock::add_districts(const void* value, size_t size) {
  districts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Stock.districts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stock::districts() const {
  // @@protoc_insertion_point(field_list:Stock.districts)
  return districts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stock::mutable_districts() {
  // @@protoc_insertion_point(field_mutable_list:Stock.districts)
  return &districts_;
}

// optional int32 year_to_date = 12;
inline bool Stock::has_year_to_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stock::set_has_year_to_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stock::clear_has_year_to_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stock::clear_year_to_date() {
  year_to_date_ = 0;
  clear_has_year_to_date();
}
inline ::google::protobuf::int32 Stock::year_to_date() const {
  // @@protoc_insertion_point(field_get:Stock.year_to_date)
  return year_to_date_;
}
inline void Stock::set_year_to_date(::google::protobuf::int32 value) {
  set_has_year_to_date();
  year_to_date_ = value;
  // @@protoc_insertion_point(field_set:Stock.year_to_date)
}

// optional int32 order_count = 13;
inline bool Stock::has_order_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Stock::set_has_order_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Stock::clear_has_order_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Stock::clear_order_count() {
  order_count_ = 0;
  clear_has_order_count();
}
inline ::google::protobuf::int32 Stock::order_count() const {
  // @@protoc_insertion_point(field_get:Stock.order_count)
  return order_count_;
}
inline void Stock::set_order_count(::google::protobuf::int32 value) {
  set_has_order_count();
  order_count_ = value;
  // @@protoc_insertion_point(field_set:Stock.order_count)
}

// optional int32 remote_count = 14;
inline bool Stock::has_remote_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Stock::set_has_remote_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Stock::clear_has_remote_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Stock::clear_remote_count() {
  remote_count_ = 0;
  clear_has_remote_count();
}
inline ::google::protobuf::int32 Stock::remote_count() const {
  // @@protoc_insertion_point(field_get:Stock.remote_count)
  return remote_count_;
}
inline void Stock::set_remote_count(::google::protobuf::int32 value) {
  set_has_remote_count();
  remote_count_ = value;
  // @@protoc_insertion_point(field_set:Stock.remote_count)
}

// optional bytes data = 20;
inline bool Stock::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stock::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stock::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stock::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Stock::data() const {
  // @@protoc_insertion_point(field_get:Stock.data)
  return data_.GetNoArena();
}
inline void Stock::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stock.data)
}
#if LANG_CXX11
inline void Stock::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stock.data)
}
#endif
inline void Stock::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stock.data)
}
inline void Stock::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stock.data)
}
inline ::std::string* Stock::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:Stock.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_data() {
  // @@protoc_insertion_point(field_release:Stock.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Stock.data)
}

// -------------------------------------------------------------------

// History

// required bytes customer_id = 1;
inline bool History::has_customer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void History::set_has_customer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void History::clear_has_customer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void History::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_id();
}
inline const ::std::string& History::customer_id() const {
  // @@protoc_insertion_point(field_get:History.customer_id)
  return customer_id_.GetNoArena();
}
inline void History::set_customer_id(const ::std::string& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.customer_id)
}
#if LANG_CXX11
inline void History::set_customer_id(::std::string&& value) {
  set_has_customer_id();
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.customer_id)
}
#endif
inline void History::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.customer_id)
}
inline void History::set_customer_id(const void* value, size_t size) {
  set_has_customer_id();
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.customer_id)
}
inline ::std::string* History::mutable_customer_id() {
  set_has_customer_id();
  // @@protoc_insertion_point(field_mutable:History.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_customer_id() {
  // @@protoc_insertion_point(field_release:History.customer_id)
  if (!has_customer_id()) {
    return NULL;
  }
  clear_has_customer_id();
  return customer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != NULL) {
    set_has_customer_id();
  } else {
    clear_has_customer_id();
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:History.customer_id)
}

// required bytes district_id = 2;
inline bool History::has_district_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void History::set_has_district_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void History::clear_has_district_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void History::clear_district_id() {
  district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_id();
}
inline const ::std::string& History::district_id() const {
  // @@protoc_insertion_point(field_get:History.district_id)
  return district_id_.GetNoArena();
}
inline void History::set_district_id(const ::std::string& value) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.district_id)
}
#if LANG_CXX11
inline void History::set_district_id(::std::string&& value) {
  set_has_district_id();
  district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.district_id)
}
#endif
inline void History::set_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.district_id)
}
inline void History::set_district_id(const void* value, size_t size) {
  set_has_district_id();
  district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.district_id)
}
inline ::std::string* History::mutable_district_id() {
  set_has_district_id();
  // @@protoc_insertion_point(field_mutable:History.district_id)
  return district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_district_id() {
  // @@protoc_insertion_point(field_release:History.district_id)
  if (!has_district_id()) {
    return NULL;
  }
  clear_has_district_id();
  return district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_district_id(::std::string* district_id) {
  if (district_id != NULL) {
    set_has_district_id();
  } else {
    clear_has_district_id();
  }
  district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district_id);
  // @@protoc_insertion_point(field_set_allocated:History.district_id)
}

// required bytes warehouse_id = 3;
inline bool History::has_warehouse_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void History::set_has_warehouse_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void History::clear_has_warehouse_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void History::clear_warehouse_id() {
  warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warehouse_id();
}
inline const ::std::string& History::warehouse_id() const {
  // @@protoc_insertion_point(field_get:History.warehouse_id)
  return warehouse_id_.GetNoArena();
}
inline void History::set_warehouse_id(const ::std::string& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.warehouse_id)
}
#if LANG_CXX11
inline void History::set_warehouse_id(::std::string&& value) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.warehouse_id)
}
#endif
inline void History::set_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.warehouse_id)
}
inline void History::set_warehouse_id(const void* value, size_t size) {
  set_has_warehouse_id();
  warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.warehouse_id)
}
inline ::std::string* History::mutable_warehouse_id() {
  set_has_warehouse_id();
  // @@protoc_insertion_point(field_mutable:History.warehouse_id)
  return warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_warehouse_id() {
  // @@protoc_insertion_point(field_release:History.warehouse_id)
  if (!has_warehouse_id()) {
    return NULL;
  }
  clear_has_warehouse_id();
  return warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_warehouse_id(::std::string* warehouse_id) {
  if (warehouse_id != NULL) {
    set_has_warehouse_id();
  } else {
    clear_has_warehouse_id();
  }
  warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:History.warehouse_id)
}

// required bytes customer_district_id = 4;
inline bool History::has_customer_district_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void History::set_has_customer_district_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void History::clear_has_customer_district_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void History::clear_customer_district_id() {
  customer_district_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_district_id();
}
inline const ::std::string& History::customer_district_id() const {
  // @@protoc_insertion_point(field_get:History.customer_district_id)
  return customer_district_id_.GetNoArena();
}
inline void History::set_customer_district_id(const ::std::string& value) {
  set_has_customer_district_id();
  customer_district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.customer_district_id)
}
#if LANG_CXX11
inline void History::set_customer_district_id(::std::string&& value) {
  set_has_customer_district_id();
  customer_district_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.customer_district_id)
}
#endif
inline void History::set_customer_district_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_customer_district_id();
  customer_district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.customer_district_id)
}
inline void History::set_customer_district_id(const void* value, size_t size) {
  set_has_customer_district_id();
  customer_district_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.customer_district_id)
}
inline ::std::string* History::mutable_customer_district_id() {
  set_has_customer_district_id();
  // @@protoc_insertion_point(field_mutable:History.customer_district_id)
  return customer_district_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_customer_district_id() {
  // @@protoc_insertion_point(field_release:History.customer_district_id)
  if (!has_customer_district_id()) {
    return NULL;
  }
  clear_has_customer_district_id();
  return customer_district_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_customer_district_id(::std::string* customer_district_id) {
  if (customer_district_id != NULL) {
    set_has_customer_district_id();
  } else {
    clear_has_customer_district_id();
  }
  customer_district_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_district_id);
  // @@protoc_insertion_point(field_set_allocated:History.customer_district_id)
}

// required bytes customer_warehouse_id = 5;
inline bool History::has_customer_warehouse_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void History::set_has_customer_warehouse_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void History::clear_has_customer_warehouse_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void History::clear_customer_warehouse_id() {
  customer_warehouse_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customer_warehouse_id();
}
inline const ::std::string& History::customer_warehouse_id() const {
  // @@protoc_insertion_point(field_get:History.customer_warehouse_id)
  return customer_warehouse_id_.GetNoArena();
}
inline void History::set_customer_warehouse_id(const ::std::string& value) {
  set_has_customer_warehouse_id();
  customer_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.customer_warehouse_id)
}
#if LANG_CXX11
inline void History::set_customer_warehouse_id(::std::string&& value) {
  set_has_customer_warehouse_id();
  customer_warehouse_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.customer_warehouse_id)
}
#endif
inline void History::set_customer_warehouse_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_customer_warehouse_id();
  customer_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.customer_warehouse_id)
}
inline void History::set_customer_warehouse_id(const void* value, size_t size) {
  set_has_customer_warehouse_id();
  customer_warehouse_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.customer_warehouse_id)
}
inline ::std::string* History::mutable_customer_warehouse_id() {
  set_has_customer_warehouse_id();
  // @@protoc_insertion_point(field_mutable:History.customer_warehouse_id)
  return customer_warehouse_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_customer_warehouse_id() {
  // @@protoc_insertion_point(field_release:History.customer_warehouse_id)
  if (!has_customer_warehouse_id()) {
    return NULL;
  }
  clear_has_customer_warehouse_id();
  return customer_warehouse_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_customer_warehouse_id(::std::string* customer_warehouse_id) {
  if (customer_warehouse_id != NULL) {
    set_has_customer_warehouse_id();
  } else {
    clear_has_customer_warehouse_id();
  }
  customer_warehouse_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_warehouse_id);
  // @@protoc_insertion_point(field_set_allocated:History.customer_warehouse_id)
}

// optional double date = 10;
inline bool History::has_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void History::set_has_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void History::clear_has_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void History::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline double History::date() const {
  // @@protoc_insertion_point(field_get:History.date)
  return date_;
}
inline void History::set_date(double value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:History.date)
}

// optional double amount = 11;
inline bool History::has_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void History::set_has_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void History::clear_has_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void History::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double History::amount() const {
  // @@protoc_insertion_point(field_get:History.amount)
  return amount_;
}
inline void History::set_amount(double value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:History.amount)
}

// optional bytes data = 20;
inline bool History::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void History::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void History::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void History::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& History::data() const {
  // @@protoc_insertion_point(field_get:History.data)
  return data_.GetNoArena();
}
inline void History::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:History.data)
}
#if LANG_CXX11
inline void History::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.data)
}
#endif
inline void History::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.data)
}
inline void History::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.data)
}
inline ::std::string* History::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:History.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* History::release_data() {
  // @@protoc_insertion_point(field_release:History.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:History.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tpcc_2eproto

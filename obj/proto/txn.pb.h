// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#ifndef PROTOBUF_INCLUDED_txn_2eproto
#define PROTOBUF_INCLUDED_txn_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_txn_2eproto 

namespace protobuf_txn_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_txn_2eproto
class TxnProto;
class TxnProtoDefaultTypeInternal;
extern TxnProtoDefaultTypeInternal _TxnProto_default_instance_;
namespace google {
namespace protobuf {
template<> ::TxnProto* Arena::CreateMaybeMessage<::TxnProto>(Arena*);
}  // namespace protobuf
}  // namespace google

enum TxnProto_IsolationLevel {
  TxnProto_IsolationLevel_SERIALIZABLE = 0,
  TxnProto_IsolationLevel_SNAPSHOT = 1,
  TxnProto_IsolationLevel_READ_COMMITTED = 2,
  TxnProto_IsolationLevel_READ_UNCOMMITTED = 3
};
bool TxnProto_IsolationLevel_IsValid(int value);
const TxnProto_IsolationLevel TxnProto_IsolationLevel_IsolationLevel_MIN = TxnProto_IsolationLevel_SERIALIZABLE;
const TxnProto_IsolationLevel TxnProto_IsolationLevel_IsolationLevel_MAX = TxnProto_IsolationLevel_READ_UNCOMMITTED;
const int TxnProto_IsolationLevel_IsolationLevel_ARRAYSIZE = TxnProto_IsolationLevel_IsolationLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnProto_IsolationLevel_descriptor();
inline const ::std::string& TxnProto_IsolationLevel_Name(TxnProto_IsolationLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnProto_IsolationLevel_descriptor(), value);
}
inline bool TxnProto_IsolationLevel_Parse(
    const ::std::string& name, TxnProto_IsolationLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnProto_IsolationLevel>(
    TxnProto_IsolationLevel_descriptor(), name, value);
}
enum TxnProto_Status {
  TxnProto_Status_NEW = 0,
  TxnProto_Status_ACTIVE = 1,
  TxnProto_Status_COMMITTED = 2,
  TxnProto_Status_ABORTED = 3
};
bool TxnProto_Status_IsValid(int value);
const TxnProto_Status TxnProto_Status_Status_MIN = TxnProto_Status_NEW;
const TxnProto_Status TxnProto_Status_Status_MAX = TxnProto_Status_ABORTED;
const int TxnProto_Status_Status_ARRAYSIZE = TxnProto_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnProto_Status_descriptor();
inline const ::std::string& TxnProto_Status_Name(TxnProto_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnProto_Status_descriptor(), value);
}
inline bool TxnProto_Status_Parse(
    const ::std::string& name, TxnProto_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnProto_Status>(
    TxnProto_Status_descriptor(), name, value);
}
// ===================================================================

class TxnProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TxnProto) */ {
 public:
  TxnProto();
  virtual ~TxnProto();

  TxnProto(const TxnProto& from);

  inline TxnProto& operator=(const TxnProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnProto(TxnProto&& from) noexcept
    : TxnProto() {
    *this = ::std::move(from);
  }

  inline TxnProto& operator=(TxnProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnProto* internal_default_instance() {
    return reinterpret_cast<const TxnProto*>(
               &_TxnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TxnProto* other);
  friend void swap(TxnProto& a, TxnProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnProto* New() const final {
    return CreateMaybeMessage<TxnProto>(NULL);
  }

  TxnProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxnProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxnProto& from);
  void MergeFrom(const TxnProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TxnProto_IsolationLevel IsolationLevel;
  static const IsolationLevel SERIALIZABLE =
    TxnProto_IsolationLevel_SERIALIZABLE;
  static const IsolationLevel SNAPSHOT =
    TxnProto_IsolationLevel_SNAPSHOT;
  static const IsolationLevel READ_COMMITTED =
    TxnProto_IsolationLevel_READ_COMMITTED;
  static const IsolationLevel READ_UNCOMMITTED =
    TxnProto_IsolationLevel_READ_UNCOMMITTED;
  static inline bool IsolationLevel_IsValid(int value) {
    return TxnProto_IsolationLevel_IsValid(value);
  }
  static const IsolationLevel IsolationLevel_MIN =
    TxnProto_IsolationLevel_IsolationLevel_MIN;
  static const IsolationLevel IsolationLevel_MAX =
    TxnProto_IsolationLevel_IsolationLevel_MAX;
  static const int IsolationLevel_ARRAYSIZE =
    TxnProto_IsolationLevel_IsolationLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IsolationLevel_descriptor() {
    return TxnProto_IsolationLevel_descriptor();
  }
  static inline const ::std::string& IsolationLevel_Name(IsolationLevel value) {
    return TxnProto_IsolationLevel_Name(value);
  }
  static inline bool IsolationLevel_Parse(const ::std::string& name,
      IsolationLevel* value) {
    return TxnProto_IsolationLevel_Parse(name, value);
  }

  typedef TxnProto_Status Status;
  static const Status NEW =
    TxnProto_Status_NEW;
  static const Status ACTIVE =
    TxnProto_Status_ACTIVE;
  static const Status COMMITTED =
    TxnProto_Status_COMMITTED;
  static const Status ABORTED =
    TxnProto_Status_ABORTED;
  static inline bool Status_IsValid(int value) {
    return TxnProto_Status_IsValid(value);
  }
  static const Status Status_MIN =
    TxnProto_Status_Status_MIN;
  static const Status Status_MAX =
    TxnProto_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    TxnProto_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return TxnProto_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return TxnProto_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return TxnProto_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes read_set = 20;
  int read_set_size() const;
  void clear_read_set();
  static const int kReadSetFieldNumber = 20;
  const ::std::string& read_set(int index) const;
  ::std::string* mutable_read_set(int index);
  void set_read_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_read_set(int index, ::std::string&& value);
  #endif
  void set_read_set(int index, const char* value);
  void set_read_set(int index, const void* value, size_t size);
  ::std::string* add_read_set();
  void add_read_set(const ::std::string& value);
  #if LANG_CXX11
  void add_read_set(::std::string&& value);
  #endif
  void add_read_set(const char* value);
  void add_read_set(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& read_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_read_set();

  // repeated bytes write_set = 21;
  int write_set_size() const;
  void clear_write_set();
  static const int kWriteSetFieldNumber = 21;
  const ::std::string& write_set(int index) const;
  ::std::string* mutable_write_set(int index);
  void set_write_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_write_set(int index, ::std::string&& value);
  #endif
  void set_write_set(int index, const char* value);
  void set_write_set(int index, const void* value, size_t size);
  ::std::string* add_write_set();
  void add_write_set(const ::std::string& value);
  #if LANG_CXX11
  void add_write_set(::std::string&& value);
  #endif
  void add_write_set(const char* value);
  void add_write_set(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& write_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_write_set();

  // repeated bytes read_write_set = 22;
  int read_write_set_size() const;
  void clear_read_write_set();
  static const int kReadWriteSetFieldNumber = 22;
  const ::std::string& read_write_set(int index) const;
  ::std::string* mutable_read_write_set(int index);
  void set_read_write_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_read_write_set(int index, ::std::string&& value);
  #endif
  void set_read_write_set(int index, const char* value);
  void set_read_write_set(int index, const void* value, size_t size);
  ::std::string* add_read_write_set();
  void add_read_write_set(const ::std::string& value);
  #if LANG_CXX11
  void add_read_write_set(::std::string&& value);
  #endif
  void add_read_write_set(const char* value);
  void add_read_write_set(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& read_write_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_read_write_set();

  // repeated int32 readers = 40;
  int readers_size() const;
  void clear_readers();
  static const int kReadersFieldNumber = 40;
  ::google::protobuf::int32 readers(int index) const;
  void set_readers(int index, ::google::protobuf::int32 value);
  void add_readers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      readers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_readers();

  // repeated int32 writers = 41;
  int writers_size() const;
  void clear_writers();
  static const int kWritersFieldNumber = 41;
  ::google::protobuf::int32 writers(int index) const;
  void set_writers(int index, ::google::protobuf::int32 value);
  void add_writers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      writers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_writers();

  // optional bytes arg = 23;
  bool has_arg() const;
  void clear_arg();
  static const int kArgFieldNumber = 23;
  const ::std::string& arg() const;
  void set_arg(const ::std::string& value);
  #if LANG_CXX11
  void set_arg(::std::string&& value);
  #endif
  void set_arg(const char* value);
  void set_arg(const void* value, size_t size);
  ::std::string* mutable_arg();
  ::std::string* release_arg();
  void set_allocated_arg(::std::string* arg);

  // required int64 txn_id = 1;
  bool has_txn_id() const;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  ::google::protobuf::int64 txn_id() const;
  void set_txn_id(::google::protobuf::int64 value);

  // optional int32 txn_type = 10;
  bool has_txn_type() const;
  void clear_txn_type();
  static const int kTxnTypeFieldNumber = 10;
  ::google::protobuf::int32 txn_type() const;
  void set_txn_type(::google::protobuf::int32 value);

  // optional .TxnProto.IsolationLevel isolation_level = 11;
  bool has_isolation_level() const;
  void clear_isolation_level();
  static const int kIsolationLevelFieldNumber = 11;
  ::TxnProto_IsolationLevel isolation_level() const;
  void set_isolation_level(::TxnProto_IsolationLevel value);

  // optional bool multipartition = 12;
  bool has_multipartition() const;
  void clear_multipartition();
  static const int kMultipartitionFieldNumber = 12;
  bool multipartition() const;
  void set_multipartition(bool value);

  // optional .TxnProto.Status status = 30;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 30;
  ::TxnProto_Status status() const;
  void set_status(::TxnProto_Status value);

  // @@protoc_insertion_point(class_scope:TxnProto)
 private:
  void set_has_txn_id();
  void clear_has_txn_id();
  void set_has_txn_type();
  void clear_has_txn_type();
  void set_has_isolation_level();
  void clear_has_isolation_level();
  void set_has_multipartition();
  void clear_has_multipartition();
  void set_has_arg();
  void clear_has_arg();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> read_set_;
  ::google::protobuf::RepeatedPtrField< ::std::string> write_set_;
  ::google::protobuf::RepeatedPtrField< ::std::string> read_write_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > readers_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > writers_;
  ::google::protobuf::internal::ArenaStringPtr arg_;
  ::google::protobuf::int64 txn_id_;
  ::google::protobuf::int32 txn_type_;
  int isolation_level_;
  bool multipartition_;
  int status_;
  friend struct ::protobuf_txn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxnProto

// required int64 txn_id = 1;
inline bool TxnProto::has_txn_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxnProto::set_has_txn_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxnProto::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxnProto::clear_txn_id() {
  txn_id_ = GOOGLE_LONGLONG(0);
  clear_has_txn_id();
}
inline ::google::protobuf::int64 TxnProto::txn_id() const {
  // @@protoc_insertion_point(field_get:TxnProto.txn_id)
  return txn_id_;
}
inline void TxnProto::set_txn_id(::google::protobuf::int64 value) {
  set_has_txn_id();
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:TxnProto.txn_id)
}

// optional int32 txn_type = 10;
inline bool TxnProto::has_txn_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxnProto::set_has_txn_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxnProto::clear_has_txn_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxnProto::clear_txn_type() {
  txn_type_ = 0;
  clear_has_txn_type();
}
inline ::google::protobuf::int32 TxnProto::txn_type() const {
  // @@protoc_insertion_point(field_get:TxnProto.txn_type)
  return txn_type_;
}
inline void TxnProto::set_txn_type(::google::protobuf::int32 value) {
  set_has_txn_type();
  txn_type_ = value;
  // @@protoc_insertion_point(field_set:TxnProto.txn_type)
}

// optional .TxnProto.IsolationLevel isolation_level = 11;
inline bool TxnProto::has_isolation_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxnProto::set_has_isolation_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxnProto::clear_has_isolation_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxnProto::clear_isolation_level() {
  isolation_level_ = 0;
  clear_has_isolation_level();
}
inline ::TxnProto_IsolationLevel TxnProto::isolation_level() const {
  // @@protoc_insertion_point(field_get:TxnProto.isolation_level)
  return static_cast< ::TxnProto_IsolationLevel >(isolation_level_);
}
inline void TxnProto::set_isolation_level(::TxnProto_IsolationLevel value) {
  assert(::TxnProto_IsolationLevel_IsValid(value));
  set_has_isolation_level();
  isolation_level_ = value;
  // @@protoc_insertion_point(field_set:TxnProto.isolation_level)
}

// optional bool multipartition = 12;
inline bool TxnProto::has_multipartition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxnProto::set_has_multipartition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxnProto::clear_has_multipartition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxnProto::clear_multipartition() {
  multipartition_ = false;
  clear_has_multipartition();
}
inline bool TxnProto::multipartition() const {
  // @@protoc_insertion_point(field_get:TxnProto.multipartition)
  return multipartition_;
}
inline void TxnProto::set_multipartition(bool value) {
  set_has_multipartition();
  multipartition_ = value;
  // @@protoc_insertion_point(field_set:TxnProto.multipartition)
}

// repeated bytes read_set = 20;
inline int TxnProto::read_set_size() const {
  return read_set_.size();
}
inline void TxnProto::clear_read_set() {
  read_set_.Clear();
}
inline const ::std::string& TxnProto::read_set(int index) const {
  // @@protoc_insertion_point(field_get:TxnProto.read_set)
  return read_set_.Get(index);
}
inline ::std::string* TxnProto::mutable_read_set(int index) {
  // @@protoc_insertion_point(field_mutable:TxnProto.read_set)
  return read_set_.Mutable(index);
}
inline void TxnProto::set_read_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TxnProto.read_set)
  read_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxnProto::set_read_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TxnProto.read_set)
  read_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxnProto::set_read_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxnProto.read_set)
}
inline void TxnProto::set_read_set(int index, const void* value, size_t size) {
  read_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxnProto.read_set)
}
inline ::std::string* TxnProto::add_read_set() {
  // @@protoc_insertion_point(field_add_mutable:TxnProto.read_set)
  return read_set_.Add();
}
inline void TxnProto::add_read_set(const ::std::string& value) {
  read_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxnProto.read_set)
}
#if LANG_CXX11
inline void TxnProto::add_read_set(::std::string&& value) {
  read_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxnProto.read_set)
}
#endif
inline void TxnProto::add_read_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxnProto.read_set)
}
inline void TxnProto::add_read_set(const void* value, size_t size) {
  read_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxnProto.read_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnProto::read_set() const {
  // @@protoc_insertion_point(field_list:TxnProto.read_set)
  return read_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxnProto::mutable_read_set() {
  // @@protoc_insertion_point(field_mutable_list:TxnProto.read_set)
  return &read_set_;
}

// repeated bytes write_set = 21;
inline int TxnProto::write_set_size() const {
  return write_set_.size();
}
inline void TxnProto::clear_write_set() {
  write_set_.Clear();
}
inline const ::std::string& TxnProto::write_set(int index) const {
  // @@protoc_insertion_point(field_get:TxnProto.write_set)
  return write_set_.Get(index);
}
inline ::std::string* TxnProto::mutable_write_set(int index) {
  // @@protoc_insertion_point(field_mutable:TxnProto.write_set)
  return write_set_.Mutable(index);
}
inline void TxnProto::set_write_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TxnProto.write_set)
  write_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxnProto::set_write_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TxnProto.write_set)
  write_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxnProto::set_write_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  write_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxnProto.write_set)
}
inline void TxnProto::set_write_set(int index, const void* value, size_t size) {
  write_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxnProto.write_set)
}
inline ::std::string* TxnProto::add_write_set() {
  // @@protoc_insertion_point(field_add_mutable:TxnProto.write_set)
  return write_set_.Add();
}
inline void TxnProto::add_write_set(const ::std::string& value) {
  write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxnProto.write_set)
}
#if LANG_CXX11
inline void TxnProto::add_write_set(::std::string&& value) {
  write_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxnProto.write_set)
}
#endif
inline void TxnProto::add_write_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxnProto.write_set)
}
inline void TxnProto::add_write_set(const void* value, size_t size) {
  write_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxnProto.write_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnProto::write_set() const {
  // @@protoc_insertion_point(field_list:TxnProto.write_set)
  return write_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxnProto::mutable_write_set() {
  // @@protoc_insertion_point(field_mutable_list:TxnProto.write_set)
  return &write_set_;
}

// repeated bytes read_write_set = 22;
inline int TxnProto::read_write_set_size() const {
  return read_write_set_.size();
}
inline void TxnProto::clear_read_write_set() {
  read_write_set_.Clear();
}
inline const ::std::string& TxnProto::read_write_set(int index) const {
  // @@protoc_insertion_point(field_get:TxnProto.read_write_set)
  return read_write_set_.Get(index);
}
inline ::std::string* TxnProto::mutable_read_write_set(int index) {
  // @@protoc_insertion_point(field_mutable:TxnProto.read_write_set)
  return read_write_set_.Mutable(index);
}
inline void TxnProto::set_read_write_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TxnProto.read_write_set)
  read_write_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxnProto::set_read_write_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TxnProto.read_write_set)
  read_write_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxnProto::set_read_write_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_write_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxnProto.read_write_set)
}
inline void TxnProto::set_read_write_set(int index, const void* value, size_t size) {
  read_write_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxnProto.read_write_set)
}
inline ::std::string* TxnProto::add_read_write_set() {
  // @@protoc_insertion_point(field_add_mutable:TxnProto.read_write_set)
  return read_write_set_.Add();
}
inline void TxnProto::add_read_write_set(const ::std::string& value) {
  read_write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxnProto.read_write_set)
}
#if LANG_CXX11
inline void TxnProto::add_read_write_set(::std::string&& value) {
  read_write_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxnProto.read_write_set)
}
#endif
inline void TxnProto::add_read_write_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  read_write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxnProto.read_write_set)
}
inline void TxnProto::add_read_write_set(const void* value, size_t size) {
  read_write_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxnProto.read_write_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnProto::read_write_set() const {
  // @@protoc_insertion_point(field_list:TxnProto.read_write_set)
  return read_write_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxnProto::mutable_read_write_set() {
  // @@protoc_insertion_point(field_mutable_list:TxnProto.read_write_set)
  return &read_write_set_;
}

// optional bytes arg = 23;
inline bool TxnProto::has_arg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxnProto::set_has_arg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxnProto::clear_has_arg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxnProto::clear_arg() {
  arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg();
}
inline const ::std::string& TxnProto::arg() const {
  // @@protoc_insertion_point(field_get:TxnProto.arg)
  return arg_.GetNoArena();
}
inline void TxnProto::set_arg(const ::std::string& value) {
  set_has_arg();
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TxnProto.arg)
}
#if LANG_CXX11
inline void TxnProto::set_arg(::std::string&& value) {
  set_has_arg();
  arg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxnProto.arg)
}
#endif
inline void TxnProto::set_arg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_arg();
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxnProto.arg)
}
inline void TxnProto::set_arg(const void* value, size_t size) {
  set_has_arg();
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxnProto.arg)
}
inline ::std::string* TxnProto::mutable_arg() {
  set_has_arg();
  // @@protoc_insertion_point(field_mutable:TxnProto.arg)
  return arg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnProto::release_arg() {
  // @@protoc_insertion_point(field_release:TxnProto.arg)
  if (!has_arg()) {
    return NULL;
  }
  clear_has_arg();
  return arg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnProto::set_allocated_arg(::std::string* arg) {
  if (arg != NULL) {
    set_has_arg();
  } else {
    clear_has_arg();
  }
  arg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg);
  // @@protoc_insertion_point(field_set_allocated:TxnProto.arg)
}

// optional .TxnProto.Status status = 30;
inline bool TxnProto::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxnProto::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxnProto::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxnProto::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::TxnProto_Status TxnProto::status() const {
  // @@protoc_insertion_point(field_get:TxnProto.status)
  return static_cast< ::TxnProto_Status >(status_);
}
inline void TxnProto::set_status(::TxnProto_Status value) {
  assert(::TxnProto_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:TxnProto.status)
}

// repeated int32 readers = 40;
inline int TxnProto::readers_size() const {
  return readers_.size();
}
inline void TxnProto::clear_readers() {
  readers_.Clear();
}
inline ::google::protobuf::int32 TxnProto::readers(int index) const {
  // @@protoc_insertion_point(field_get:TxnProto.readers)
  return readers_.Get(index);
}
inline void TxnProto::set_readers(int index, ::google::protobuf::int32 value) {
  readers_.Set(index, value);
  // @@protoc_insertion_point(field_set:TxnProto.readers)
}
inline void TxnProto::add_readers(::google::protobuf::int32 value) {
  readers_.Add(value);
  // @@protoc_insertion_point(field_add:TxnProto.readers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TxnProto::readers() const {
  // @@protoc_insertion_point(field_list:TxnProto.readers)
  return readers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TxnProto::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:TxnProto.readers)
  return &readers_;
}

// repeated int32 writers = 41;
inline int TxnProto::writers_size() const {
  return writers_.size();
}
inline void TxnProto::clear_writers() {
  writers_.Clear();
}
inline ::google::protobuf::int32 TxnProto::writers(int index) const {
  // @@protoc_insertion_point(field_get:TxnProto.writers)
  return writers_.Get(index);
}
inline void TxnProto::set_writers(int index, ::google::protobuf::int32 value) {
  writers_.Set(index, value);
  // @@protoc_insertion_point(field_set:TxnProto.writers)
}
inline void TxnProto::add_writers(::google::protobuf::int32 value) {
  writers_.Add(value);
  // @@protoc_insertion_point(field_add:TxnProto.writers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TxnProto::writers() const {
  // @@protoc_insertion_point(field_list:TxnProto.writers)
  return writers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TxnProto::mutable_writers() {
  // @@protoc_insertion_point(field_mutable_list:TxnProto.writers)
  return &writers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TxnProto_IsolationLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxnProto_IsolationLevel>() {
  return ::TxnProto_IsolationLevel_descriptor();
}
template <> struct is_proto_enum< ::TxnProto_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxnProto_Status>() {
  return ::TxnProto_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_txn_2eproto
